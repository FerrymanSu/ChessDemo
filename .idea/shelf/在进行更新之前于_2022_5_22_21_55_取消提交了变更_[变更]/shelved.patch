Index: src/model/ChessComponent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model;\r\n\r\nimport view.ChessboardPoint;\r\nimport controller.ClickController;\r\n\r\nimport javax.imageio.ImageIO;\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.MouseEvent;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\n\r\npublic abstract class ChessComponent extends JComponent implements Cloneable{\r\n\r\n    private  Color[] BACKGROUND_COLORS = {new Color(103,67,49), new Color(231,203,167)};\r\n    private ClickController clickController;\r\n\r\n    private ChessboardPoint chessboardPoint;\r\n    protected final ChessColor chessColor;\r\n    protected char name;\r\n    private boolean move;\r\n    private boolean selected;\r\n    private boolean canMoved;\r\n    private boolean skip;\r\n    private boolean mouseEnter;\r\n    protected ChessComponent[][] chessComponents;\r\n\r\n\r\n    public void setColor(Color[] color){\r\n        BACKGROUND_COLORS = color;\r\n    }\r\n\r\n\r\n    protected ChessComponent(ChessboardPoint chessboardPoint, Point location, ChessColor chessColor, ClickController clickController, int size) {\r\n        enableEvents(AWTEvent.MOUSE_EVENT_MASK);\r\n        setLocation(location);\r\n        setSize(size, size);\r\n        this.chessboardPoint = chessboardPoint;\r\n        this.chessColor = chessColor;\r\n        this.move = false;\r\n        this.selected = false;\r\n        this.canMoved = false;\r\n        this.skip = false;\r\n        this.mouseEnter = false;\r\n        this.clickController = clickController;\r\n        this.chessComponents = clickController.getChessboard().getChessComponents();\r\n    }\r\n\r\n    public ChessboardPoint getChessboardPoint() {\r\n        return chessboardPoint;\r\n    }\r\n\r\n    public void setChessboardPoint(ChessboardPoint chessboardPoint) {\r\n        this.chessboardPoint = chessboardPoint;\r\n    }\r\n\r\n    public ChessColor getChessColor() {\r\n        return chessColor;\r\n    }\r\n\r\n    public boolean isMove() {\r\n        return move;\r\n    }\r\n\r\n    public void setMove(boolean move) {\r\n        this.move = move;\r\n    }\r\n\r\n    public boolean isSelected() {\r\n        return selected;\r\n    }\r\n\r\n    public void setSelected(boolean selected) {\r\n        this.selected = selected;\r\n    }\r\n\r\n    public boolean isCanMoved() {\r\n        return canMoved;\r\n    }\r\n\r\n    public void setCanMoved(boolean canMoved) {\r\n        this.canMoved = canMoved;\r\n    }\r\n\r\n    public boolean isSkip() {\r\n        return skip;\r\n    }\r\n\r\n    public void setSkip(boolean skip) {\r\n        this.skip = skip;\r\n    }\r\n\r\n    public boolean isMouseEnter() {\r\n        return mouseEnter;\r\n    }\r\n\r\n\r\n\r\n    public void setMouseEnter(boolean mouseEnter) {\r\n        this.mouseEnter = mouseEnter;\r\n    }\r\n\r\n    /**\r\n     * @param another 主要用于和另外一个棋子交换位置\r\n     *                <br>\r\n     *                调用时机是在移动棋子的时候，将操控的棋子和对应的空位置棋子(EmptySlotComponent)做交换\r\n     */\r\n    public void swapLocation(ChessComponent another) {\r\n        ChessboardPoint chessboardPoint1 = getChessboardPoint(), chessboardPoint2 = another.getChessboardPoint();\r\n        Point point1 = getLocation(), point2 = another.getLocation();\r\n        setChessboardPoint(chessboardPoint2);\r\n        setLocation(point2);\r\n        another.setChessboardPoint(chessboardPoint1);\r\n        another.setLocation(point1);\r\n    }\r\n\r\n    /**\r\n     * @param e 响应鼠标监听事件\r\n     *          <br>\r\n     *          当接收到鼠标动作的时候，这个方法就会自动被调用，调用所有监听者的onClick方法，处理棋子的选中，移动等等行为。\r\n     */\r\n    @Override\r\n    protected void processMouseEvent(MouseEvent e) {\r\n        super.processMouseEvent(e);\r\n\r\n        if (e.getID() == MouseEvent.MOUSE_PRESSED) {\r\n            System.out.printf(\"Click [%d,%d]\\n\", chessboardPoint.getX(), chessboardPoint.getY());\r\n            clickController.onClick(this);\r\n        }\r\n        if (e.getID() == MouseEvent.MOUSE_ENTERED) {\r\n            setMouseEnter(true);\r\n            this.repaint();\r\n        }\r\n        if (e.getID() == MouseEvent.MOUSE_EXITED) {\r\n            setMouseEnter(false);\r\n            this.repaint();\r\n        }\r\n\r\n    }\r\n\r\n    public abstract ArrayList<ChessboardPoint> getCanMoveChess(ChessComponent[][] chessboard);\r\n\r\n    public boolean canMoveTo(ChessComponent[][] chessboard, ChessboardPoint destination){\r\n        ArrayList<ChessboardPoint> pointsList = this.getCanMoveChess(chessboard);\r\n        return pointsList.contains(destination);\r\n    }\r\n\r\n    public boolean checkAfterMove(ChessboardPoint chessboardPoint){\r\n        KingChessComponent king = null;\r\n        ChessComponent[][] chessComponents = new ChessComponent[8][8];\r\n\r\n        for (int i = 0; i < 8; i++) {\r\n            for (int j = 0; j < 8; j++) {\r\n                chessComponents[i][j] = this.chessComponents[i][j].clone();\r\n            }\r\n        }\r\n        for (ChessComponent[] Chess : chessComponents){\r\n            for (ChessComponent chess : Chess) {\r\n                if (chess instanceof KingChessComponent && chessColor == chess.getChessColor()){\r\n                    king = (KingChessComponent) chess;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        int x1 = this.chessboardPoint.getX();\r\n        int y1 = this.chessboardPoint.getY();\r\n        ChessComponent chess1 = chessComponents[x1][y1];\r\n        int x2 = chessboardPoint.getX();\r\n        int y2 = chessboardPoint.getY();\r\n        ChessComponent chess2 = chessComponents[x2][y2];\r\n\r\n        chess1.setChessboardPoint(new ChessboardPoint(x2,y2));\r\n        chessComponents[x2][y2] = chess1;\r\n        chessComponents[x1][y1] =\r\n                new EmptySlotComponent(this.chessboardPoint, new Point(0,0), clickController, 0);\r\n        \r\n        for (ChessComponent[] Chess : chessComponents){\r\n            for (ChessComponent chess : Chess) {\r\n                if (chess.getChessColor() != chessColor) {\r\n                    chess.setSkip(true);\r\n                    ArrayList<ChessboardPoint> chessboardPoints = chess.getCanMoveChess(chessComponents);\r\n                    chess.setSkip(false);\r\n\r\n                    assert king != null;\r\n                    if (chessboardPoints.contains(king.getChessboardPoint())){\r\n                        chess1.setChessboardPoint(new ChessboardPoint(x1,y1));\r\n                        chessComponents[x1][y1] = chess1;\r\n                        chessComponents[x2][y2] = chess2;\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        chess1.setChessboardPoint(this.chessboardPoint);\r\n        chessComponents[x1][y1] = chess1;\r\n        chessComponents[x2][y2] = chess2;\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 这个方法主要用于加载一些特定资源，如棋子图片等等。\r\n     *\r\n     * @throws IOException 如果一些资源找不到(如棋子图片路径错误)，就会抛出异常\r\n     */\r\n    public abstract void loadResource() throws IOException;\r\n\r\n    @Override\r\n    public String toString() {\r\n        return String.valueOf(this.name);\r\n    }\r\n\r\n    @Override\r\n    protected void paintComponent(Graphics g) {\r\n        super.paintComponents(g);\r\n        Color squareColor = BACKGROUND_COLORS[(chessboardPoint.getX() + chessboardPoint.getY()) % 2];\r\n        g.setColor(squareColor);\r\n        g.fillRect(0, 0, this.getWidth(), this.getHeight());\r\n        if (isMouseEnter()) {\r\n            g.setColor(new Color(51,201,255));\r\n            g.draw3DRect(0,0,this.getWidth(),this.getHeight(),true);\r\n            g.fill3DRect(0,0,this.getWidth(),this.getHeight(),true);\r\n        }\r\n        if (isSelected()) {\r\n            // Highlights the model if selected.\r\n            g.setColor(Color.LIGHT_GRAY);\r\n            g.drawRect(0, 0, getWidth() , getHeight());\r\n            g.fillRect(0, 0, getWidth() , getHeight());\r\n        }\r\n        if (isCanMoved()) {\r\n            g.setColor(Color.GRAY);\r\n            g.fillOval(getWidth()/3, getHeight()/3, getWidth()/3, getHeight()/3);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public ChessComponent clone() {\r\n        try {\r\n            ChessComponent clone = (ChessComponent) super.clone();\r\n            clone.setChessboardPoint(new ChessboardPoint(chessboardPoint.getX(),chessboardPoint.getY()));\r\n            return clone;\r\n        } catch (CloneNotSupportedException e) {\r\n            throw new AssertionError();\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/model/ChessComponent.java b/src/model/ChessComponent.java
--- a/src/model/ChessComponent.java	(revision 638eccc5e6f94dedffd55fd30e2324380e774a38)
+++ b/src/model/ChessComponent.java	(date 1653226357122)
@@ -1,5 +1,7 @@
 package model;
 
+import AI.ChessAI;
+import view.Chessboard;
 import view.ChessboardPoint;
 import controller.ClickController;
 
@@ -95,7 +97,9 @@
         return mouseEnter;
     }
 
-
+    public char Name() {
+        return name;
+    }
 
     public void setMouseEnter(boolean mouseEnter) {
         this.mouseEnter = mouseEnter;
@@ -123,18 +127,37 @@
     @Override
     protected void processMouseEvent(MouseEvent e) {
         super.processMouseEvent(e);
-
-        if (e.getID() == MouseEvent.MOUSE_PRESSED) {
-            System.out.printf("Click [%d,%d]\n", chessboardPoint.getX(), chessboardPoint.getY());
-            clickController.onClick(this);
-        }
-        if (e.getID() == MouseEvent.MOUSE_ENTERED) {
-            setMouseEnter(true);
-            this.repaint();
-        }
-        if (e.getID() == MouseEvent.MOUSE_EXITED) {
-            setMouseEnter(false);
-            this.repaint();
+        Chessboard chessboard = clickController.getChessboard();
+        boolean AI = chessboard.isAI();
+        if (!AI){
+            if (e.getID() == MouseEvent.MOUSE_PRESSED) {
+                System.out.printf("Click [%d,%d]\n", chessboardPoint.getX(), chessboardPoint.getY());
+                clickController.onClick(this);
+            }
+            if (e.getID() == MouseEvent.MOUSE_ENTERED) {
+                setMouseEnter(true);
+                this.repaint();
+            }
+            if (e.getID() == MouseEvent.MOUSE_EXITED) {
+                setMouseEnter(false);
+                this.repaint();
+            }
+        }
+        else {
+            if (chessboard.getCurrentColor() == ChessColor.WHITE) {
+                if (e.getID() == MouseEvent.MOUSE_PRESSED) {
+                    System.out.printf("Click [%d,%d]\n", chessboardPoint.getX(), chessboardPoint.getY());
+                    clickController.onClick(this);
+                }
+                if (e.getID() == MouseEvent.MOUSE_ENTERED) {
+                    setMouseEnter(true);
+                    this.repaint();
+                }
+                if (e.getID() == MouseEvent.MOUSE_EXITED) {
+                    setMouseEnter(false);
+                    this.repaint();
+                }
+            }
         }
 
     }
Index: src/controller/ClickController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controller;\r\n\r\n\r\nimport model.*;\r\nimport view.Chessboard;\r\nimport view.ChessboardPoint;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.util.ArrayList;\r\n\r\npublic class ClickController {\r\n    private final Chessboard chessboard;\r\n    private final ChessComponent[][] chessComponents;\r\n    private ArrayList<ChessboardPoint> points;\r\n    private ChessComponent first;\r\n    private PawnChessComponent passPawn;\r\n\r\n    public ClickController(Chessboard chessboard) {\r\n        this.chessboard = chessboard;\r\n        this.points = new ArrayList<>();\r\n        this.chessComponents = chessboard.getChessComponents();\r\n    }\r\n\r\n    public Chessboard getChessboard() {\r\n        return chessboard;\r\n    }\r\n\r\n    public void onClick(ChessComponent chessComponent) {\r\n        if (first == null) {\r\n            if (handleFirst(chessComponent)) {\r\n                chessComponent.setSelected(true);\r\n                first = chessComponent;\r\n                first.repaint();\r\n\r\n                points = first.getCanMoveChess(chessComponents);\r\n                for (ChessboardPoint point : points){\r\n                    int X = point.getX();\r\n                    int Y = point.getY();\r\n                    chessComponents[X][Y].setCanMoved(true);\r\n                    chessComponents[X][Y].repaint();\r\n                }\r\n\r\n                if (chessboard.getRound() == 0){\r\n                    chessboard.getGameController().saveGameToFile(chessboard.toStringList());\r\n                }\r\n            }\r\n        } else {\r\n            if (first == chessComponent) { // 再次点击取消选取\r\n                chessComponent.setSelected(false);\r\n                ChessComponent recordFirst = first;\r\n                first = null;\r\n                recordFirst.repaint();\r\n\r\n                for (ChessboardPoint point : points){\r\n                    int X = point.getX();\r\n                    int Y = point.getY();\r\n                    chessComponents[X][Y].setCanMoved(false);\r\n                    chessComponents[X][Y].repaint();\r\n                    points = new ArrayList<>();\r\n                }\r\n            }\r\n            else if (first.getChessColor() == chessComponent.getChessColor()){ // 切换选取目标\r\n                first.setSelected(false);\r\n                first.repaint();\r\n\r\n                for (ChessboardPoint point : points){\r\n                    int X = point.getX();\r\n                    int Y = point.getY();\r\n                    chessComponents[X][Y].setCanMoved(false);\r\n                    chessComponents[X][Y].repaint();\r\n                    points = new ArrayList<>();\r\n                }\r\n\r\n                chessComponent.setSelected(true);\r\n                first = chessComponent;\r\n                chessComponent.repaint();\r\n\r\n                points = first.getCanMoveChess(chessComponents);\r\n                for (ChessboardPoint point : points){\r\n                    int X = point.getX();\r\n                    int Y = point.getY();\r\n                    chessComponents[X][Y].setCanMoved(true);\r\n                    chessComponents[X][Y].repaint();\r\n                }\r\n            }\r\n            else if (handleSecond(chessComponent)) {\r\n                if (passPawn != null){\r\n                    passPawn.setTwoStep(false);\r\n                    passPawn = null;\r\n                }\r\n                if (first instanceof PawnChessComponent &&\r\n                        Math.abs(chessComponent.getChessboardPoint().getX() - first.getChessboardPoint().getX()) == 2){\r\n                    passPawn = ((PawnChessComponent) first);\r\n                    passPawn.setTwoStep(true);\r\n                }\r\n                if (first instanceof PawnChessComponent && chessComponent instanceof EmptySlotComponent &&\r\n                        first.getChessboardPoint().getY() != chessComponent.getChessboardPoint().getY()){\r\n                    int X = first.getChessboardPoint().getX();\r\n                    int Y = chessComponent.getChessboardPoint().getY();\r\n                    chessboard.removeChessComponents(chessComponents[X][Y]);\r\n                }\r\n                if (first instanceof KingChessComponent || first instanceof RookChessComponent) {\r\n                    if (!first.isMove()) {\r\n                        first.setMove(true);\r\n                    }\r\n                }\r\n                if (first instanceof KingChessComponent &&\r\n                        Math.abs(first.getChessboardPoint().getY() - chessComponent.getChessboardPoint().getY()) >= 2){\r\n                    int X = first.getChessboardPoint().getX();\r\n                    int Y1 = first.getChessboardPoint().getY();\r\n                    int Y2 = chessComponent.getChessboardPoint().getY();\r\n                    if (Y1 > Y2) {\r\n                        chessboard.swapChessComponents(chessComponents[X][0],chessComponents[X][Y2 + 1]);\r\n                    }\r\n                    else {\r\n                        chessboard.swapChessComponents(chessComponents[X][7],chessComponents[X][Y2 - 1]);\r\n                    }\r\n                }\r\n\r\n                //repaint in swap chess method.\r\n                first.setSelected(false);\r\n                chessboard.swapChessComponents(first, chessComponent);\r\n                chessboard.swapColor();\r\n\r\n                if (first instanceof PawnChessComponent && ((PawnChessComponent) first).checkTurn()) {\r\n                    Object[] options = {\"Queen\", \"Bishop\", \"Knight\", \"Rook\"};\r\n                    int turn = JOptionPane.showOptionDialog(null,\"请选择升变成:\", \"升变!\",\r\n                            JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,options[0]);\r\n                    chessboard.pawnTurn(first,turn);\r\n                }\r\n\r\n                for (ChessboardPoint point : points){\r\n                    int X = point.getX();\r\n                    int Y = point.getY();\r\n                    chessComponents[X][Y].setCanMoved(false);\r\n                    chessComponents[X][Y].repaint();\r\n                }\r\n\r\n                chessboard.checkCheckmated();\r\n                first = null;\r\n\r\n                System.out.print(chessboard);\r\n                chessboard.setRound(chessboard.getRound() + 1);\r\n                chessboard.getGameController().saveGameToFile(chessboard.toStringList());\r\n\r\n                if (chessboard.checkGameOver()){\r\n                    System.out.println(chessboard.getWinner());\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param chessComponent 目标选取的棋子\r\n     * @return 目标选取的棋子是否与棋盘记录的当前行棋方颜色相同\r\n     */\r\n\r\n    private boolean handleFirst(ChessComponent chessComponent) {\r\n        return chessComponent.getChessColor() == chessboard.getCurrentColor();\r\n    }\r\n\r\n    /**\r\n     * @param chessComponent first棋子目标移动到的棋子second\r\n     * @return first棋子是否能够移动到second棋子位置\r\n     */\r\n\r\n    private boolean handleSecond(ChessComponent chessComponent) {\r\n        return chessComponent.getChessColor() != chessboard.getCurrentColor() &&\r\n                first.canMoveTo(chessboard.getChessComponents(), chessComponent.getChessboardPoint());\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/controller/ClickController.java b/src/controller/ClickController.java
--- a/src/controller/ClickController.java	(revision 638eccc5e6f94dedffd55fd30e2324380e774a38)
+++ b/src/controller/ClickController.java	(date 1653224654969)
@@ -124,9 +124,15 @@
                 chessboard.swapColor();
 
                 if (first instanceof PawnChessComponent && ((PawnChessComponent) first).checkTurn()) {
-                    Object[] options = {"Queen", "Bishop", "Knight", "Rook"};
-                    int turn = JOptionPane.showOptionDialog(null,"请选择升变成:", "升变!",
-                            JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,options[0]);
+                    int turn;
+                    if (!chessboard.isAI()) {
+                        Object[] options = {"Queen", "Bishop", "Knight", "Rook"};
+                        turn = JOptionPane.showOptionDialog(null,"请选择升变成:", "升变!",
+                                JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,options[0]);
+                    }
+                    else {
+                        turn = 0;
+                    }
                     chessboard.pawnTurn(first,turn);
                 }
 
@@ -145,7 +151,10 @@
                 chessboard.getGameController().saveGameToFile(chessboard.toStringList());
 
                 if (chessboard.checkGameOver()){
-                    System.out.println(chessboard.getWinner());
+                    JOptionPane.showMessageDialog(null,"The winner is Player " + chessboard.getWinner() + "!");
+                }
+                else if(chessboard.checkAITurn()) {
+                    chessboard.getMyAI().playChess();
                 }
             }
         }
Index: src/view/Chessboard.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package view;\r\n\r\n\r\nimport com.tedu.manager.MusicPlayer;\r\nimport controller.GameController;\r\nimport model.*;\r\nimport controller.ClickController;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\n\r\npublic class Chessboard extends JComponent {\r\n    private static final int CHESSBOARD_SIZE = 8;\r\n    private final ChessComponent[][] chessComponents = new ChessComponent[CHESSBOARD_SIZE][CHESSBOARD_SIZE];\r\n    private ChessColor currentColor = ChessColor.WHITE;\r\n    private int round;\r\n    private final ClickController clickController = new ClickController(this);\r\n    private GameController gameController;\r\n    private final int CHESS_SIZE;\r\n    protected ChessColor winner;\r\n    public KingChessComponent whiteKing;\r\n    public KingChessComponent blackKing;\r\n    private JLabel hintLabel;\r\n\r\n\r\n    private Color color1;\r\n    private Color color2;\r\n\r\n    public void setHintLabel(JLabel hintLabel) {\r\n        this.hintLabel = hintLabel;\r\n    }\r\n\r\n\r\n    public Chessboard(int width, int height) {\r\n        setLayout(null); // Use absolute layout.\r\n        setSize(width, height);\r\n\r\n        CHESS_SIZE = width / 8;\r\n        System.out.printf(\"chessboard size = %d, chess size = %d\\n\", width, CHESS_SIZE);\r\n\r\n        round = 0;\r\n        initiateEmptyChessboard();\r\n\r\n        initRookOnBoard(0, 0, ChessColor.BLACK);\r\n        initRookOnBoard(0, CHESSBOARD_SIZE - 1, ChessColor.BLACK);\r\n        initRookOnBoard(CHESSBOARD_SIZE - 1, 0, ChessColor.WHITE);\r\n        initRookOnBoard(CHESSBOARD_SIZE - 1, CHESSBOARD_SIZE - 1, ChessColor.WHITE);\r\n        initKnightOnBoard(0, 1, ChessColor.BLACK);\r\n        initKnightOnBoard(0, CHESSBOARD_SIZE - 2, ChessColor.BLACK);\r\n        initKnightOnBoard(CHESSBOARD_SIZE - 1, 1, ChessColor.WHITE);\r\n        initKnightOnBoard(CHESSBOARD_SIZE - 1, CHESSBOARD_SIZE - 2, ChessColor.WHITE);\r\n        initBishopOnBoard(0, 2, ChessColor.BLACK);\r\n        initBishopOnBoard(0, CHESSBOARD_SIZE - 3, ChessColor.BLACK);\r\n        initBishopOnBoard(CHESSBOARD_SIZE - 1, 2, ChessColor.WHITE);\r\n        initBishopOnBoard(CHESSBOARD_SIZE - 1, CHESSBOARD_SIZE - 3, ChessColor.WHITE);\r\n        blackKing = initKingOnBoard(0, CHESSBOARD_SIZE - 4, ChessColor.BLACK);\r\n        whiteKing = initKingOnBoard(CHESSBOARD_SIZE - 1, CHESSBOARD_SIZE - 4, ChessColor.WHITE);\r\n        initQueenOnBoard(0, 3, ChessColor.BLACK);\r\n        initQueenOnBoard(CHESSBOARD_SIZE - 1, 3, ChessColor.WHITE);\r\n        for (int i = 0; i < CHESSBOARD_SIZE; i++){\r\n            initPawnOnBoard(1, i, ChessColor.BLACK);\r\n            initPawnOnBoard(CHESSBOARD_SIZE - 2, i, ChessColor.WHITE);\r\n        }\r\n    }\r\n\r\n    public ChessComponent[][] getChessComponents() {\r\n        return chessComponents;\r\n    }\r\n\r\n    public ChessColor getCurrentColor() {\r\n        return currentColor;\r\n    }\r\n\r\n    public ChessColor getWinner() {\r\n        return winner;\r\n    }\r\n\r\n    public int getRound() {\r\n        return round;\r\n    }\r\n\r\n    public void setRound(int round) {\r\n        this.round = round;\r\n    }\r\n\r\n    public GameController getGameController() {\r\n        return gameController;\r\n    }\r\n\r\n    public void setGameController(GameController gameController) {\r\n        this.gameController = gameController;\r\n    }\r\n\r\n    public void putChessOnBoard(ChessComponent chessComponent) {\r\n        int row = chessComponent.getChessboardPoint().getX(), col = chessComponent.getChessboardPoint().getY();\r\n\r\n        if (chessComponents[row][col] != null) {\r\n            remove(chessComponents[row][col]);\r\n        }\r\n        add(chessComponents[row][col] = chessComponent);\r\n    }\r\n\r\n    public void swapChessComponents(ChessComponent chess1, ChessComponent chess2) {\r\n        // Note that chess1 has higher priority, 'destroys' chess2 if exists.\r\n        remove(chess2);\r\n        add(chess2 = new EmptySlotComponent(chess2.getChessboardPoint(), chess2.getLocation(), clickController, CHESS_SIZE));\r\n        chess1.swapLocation(chess2);\r\n        int row1 = chess1.getChessboardPoint().getX(), col1 = chess1.getChessboardPoint().getY();\r\n        chessComponents[row1][col1] = chess1;\r\n        int row2 = chess2.getChessboardPoint().getX(), col2 = chess2.getChessboardPoint().getY();\r\n        chessComponents[row2][col2] = chess2;\r\n\r\n        MusicPlayer musicPlayer = new MusicPlayer(\"./Music/ChessSound.wav\");\r\n        musicPlayer.play();\r\n\r\n        chess1.repaint();\r\n        chess2.repaint();\r\n    }\r\n\r\n    public void removeChessComponents(ChessComponent chess) {\r\n        remove(chess);\r\n        add(chess = new EmptySlotComponent(chess.getChessboardPoint(), chess.getLocation(), clickController, CHESS_SIZE));\r\n        chess.repaint();\r\n    }\r\n\r\n    public void initiateEmptyChessboard() {\r\n        for (int i = 0; i < chessComponents.length; i++) {\r\n            for (int j = 0; j < chessComponents[i].length; j++) {\r\n                putChessOnBoard(new EmptySlotComponent(new ChessboardPoint(i, j), calculatePoint(i, j), clickController, CHESS_SIZE));\r\n            }\r\n        }\r\n    }\r\n\r\n    public void swapColor() {\r\n        currentColor = currentColor == ChessColor.BLACK ? ChessColor.WHITE : ChessColor.BLACK;\r\n        hintLabel.setText(currentColor == ChessColor.BLACK? \"Turn For BLACK\" : \"Turn For WHITE\");\r\n    }\r\n\r\n    private void initRookOnBoard(int row, int col, ChessColor color) {\r\n        ChessComponent chessComponent = new RookChessComponent(new ChessboardPoint(row, col), calculatePoint(row, col), color, clickController, CHESS_SIZE);\r\n        chessComponent.setVisible(true);\r\n        putChessOnBoard(chessComponent);\r\n    }\r\n\r\n    private void initKnightOnBoard(int row, int col, ChessColor color) {\r\n        ChessComponent chessComponent = new KnightChessComponent(new ChessboardPoint(row, col), calculatePoint(row, col), color, clickController, CHESS_SIZE);\r\n        chessComponent.setVisible(true);\r\n        putChessOnBoard(chessComponent);\r\n    }\r\n\r\n    private void initBishopOnBoard(int row, int col, ChessColor color) {\r\n        ChessComponent chessComponent = new BishopChessComponent(new ChessboardPoint(row, col), calculatePoint(row, col), color, clickController, CHESS_SIZE);\r\n        chessComponent.setVisible(true);\r\n        putChessOnBoard(chessComponent);\r\n    }\r\n\r\n    private void initQueenOnBoard(int row, int col, ChessColor color) {\r\n        ChessComponent chessComponent = new QueenChessComponent(new ChessboardPoint(row, col), calculatePoint(row, col), color, clickController, CHESS_SIZE);\r\n        chessComponent.setVisible(true);\r\n        putChessOnBoard(chessComponent);\r\n    }\r\n\r\n    private KingChessComponent initKingOnBoard(int row, int col, ChessColor color) {\r\n        KingChessComponent chessComponent = new KingChessComponent(new ChessboardPoint(row, col), calculatePoint(row, col), color, clickController, CHESS_SIZE);\r\n        chessComponent.setVisible(true);\r\n        putChessOnBoard(chessComponent);\r\n        return chessComponent;\r\n    }\r\n\r\n    private void initPawnOnBoard(int row, int col, ChessColor color) {\r\n        ChessComponent chessComponent = new PawnChessComponent(new ChessboardPoint(row, col), calculatePoint(row, col), color, clickController, CHESS_SIZE);\r\n        chessComponent.setVisible(true);\r\n        putChessOnBoard(chessComponent);\r\n    }\r\n\r\n    @Override\r\n    protected void paintComponent(Graphics g) {\r\n        super.paintComponent(g);\r\n        ((Graphics2D) g).setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\r\n    }\r\n\r\n\r\n    private Point calculatePoint(int row, int col) {\r\n        return new Point(col * CHESS_SIZE, row * CHESS_SIZE);\r\n    }\r\n\r\n    public void loadGame(List<String> chessData) {\r\n        initiateEmptyChessboard();\r\n        for (int i = 0; i < chessData.size() - 1; i++){\r\n            for (int j = 0; j < 8; j++){\r\n                switch (chessData.get(i).charAt(j)) {\r\n                    case 'K' -> blackKing = initKingOnBoard(i, j, ChessColor.BLACK);\r\n                    case 'k' -> whiteKing = initKingOnBoard(i, j, ChessColor.WHITE);\r\n                    case 'Q' -> initQueenOnBoard(i, j, ChessColor.BLACK);\r\n                    case 'q' -> initQueenOnBoard(i, j, ChessColor.WHITE);\r\n                    case 'B' -> initBishopOnBoard(i, j, ChessColor.BLACK);\r\n                    case 'b' -> initBishopOnBoard(i, j, ChessColor.WHITE);\r\n                    case 'N' -> initKnightOnBoard(i, j, ChessColor.BLACK);\r\n                    case 'n' -> initKnightOnBoard(i, j, ChessColor.WHITE);\r\n                    case 'R' -> initRookOnBoard(i, j, ChessColor.BLACK);\r\n                    case 'r' -> initRookOnBoard(i, j, ChessColor.WHITE);\r\n                    case 'P' -> initPawnOnBoard(i, j, ChessColor.BLACK);\r\n                    case 'p' -> initPawnOnBoard(i, j, ChessColor.WHITE);\r\n                }\r\n            }\r\n        }\r\n        this.repaint();\r\n        if (chessData.get(chessData.size() - 1).equals(\"w\")) {\r\n            currentColor = ChessColor.WHITE;\r\n        }\r\n        else\r\n            currentColor = ChessColor.BLACK;\r\n        this.checkCheckmated();\r\n    }\r\n\r\n    public void pawnTurn (ChessComponent chess , int n) {\r\n        final ChessColor chessColor = chess.getChessColor();\r\n        final int X = chess.getChessboardPoint().getX();\r\n        final int Y = chess.getChessboardPoint().getY();\r\n        remove(chess);\r\n        switch (n) {\r\n            case 0 -> initQueenOnBoard(X,Y,chessColor);\r\n            case 1 -> initBishopOnBoard(X,Y,chessColor);\r\n            case 2 -> initKnightOnBoard(X,Y,chessColor);\r\n            case 3 -> initRookOnBoard(X,Y,chessColor);\r\n        }\r\n        chessComponents[X][Y].repaint();\r\n    }\r\n\r\n    public void checkCheckmated(){\r\n        if (currentColor == ChessColor.BLACK){\r\n            whiteKing.setCheckmated(false);\r\n            whiteKing.repaint();\r\n            for (ChessComponent[] Chess : chessComponents) {\r\n                for (ChessComponent chess : Chess){\r\n                    if (chess.getChessColor() != currentColor &&\r\n                            chess.getCanMoveChess(chessComponents).contains(blackKing.getChessboardPoint())){\r\n                        blackKing.setCheckmated(true);\r\n                        blackKing.repaint();\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            blackKing.setCheckmated(false);\r\n            blackKing.repaint();\r\n            for (ChessComponent[] Chess : chessComponents) {\r\n                for (ChessComponent chess : Chess){\r\n                    if (chess.getChessColor() != currentColor &&\r\n                            chess.getCanMoveChess(chessComponents).contains(whiteKing.getChessboardPoint())){\r\n                        whiteKing.setCheckmated(true);\r\n                        whiteKing.repaint();\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    public boolean checkGameOver() {\r\n        ChessComponent[][] chessComponents = getChessComponents();\r\n        ChessColor chessColor = getCurrentColor();\r\n        for (ChessComponent[] Chess : chessComponents){\r\n            for (ChessComponent chess : Chess){\r\n                if (chess.getCanMoveChess(chessComponents).size() != 0 && chess.getChessColor() == chessColor){\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        winner = chessColor == ChessColor.BLACK? ChessColor.WHITE : ChessColor.BLACK;\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        String str = \"\";\r\n        for (int i = 0; i < 8; i++){\r\n            for (int j = 0; j < 8; j++){\r\n                str = str.concat(chessComponents[i][j].toString());\r\n            }\r\n            str = str.concat(\"\\n\");\r\n        }\r\n        if (currentColor == ChessColor.WHITE) str = str.concat(\"w\\n\");\r\n        else str = str.concat(\"b\\n\");\r\n        return str;\r\n    }\r\n\r\n    public List<String> toStringList() {\r\n        String[] strings = toString().split(\"\\n\");\r\n        System.out.println(strings.length);\r\n        return new ArrayList<>(Arrays.asList(strings));\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/view/Chessboard.java b/src/view/Chessboard.java
--- a/src/view/Chessboard.java	(revision 638eccc5e6f94dedffd55fd30e2324380e774a38)
+++ b/src/view/Chessboard.java	(date 1653223322229)
@@ -1,6 +1,8 @@
 package view;
 
 
+import AI.AILevel;
+import AI.ChessAI;
 import com.tedu.manager.MusicPlayer;
 import controller.GameController;
 import model.*;
@@ -8,6 +10,7 @@
 
 import javax.swing.*;
 import java.awt.*;
+import java.io.File;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
@@ -15,6 +18,8 @@
 public class Chessboard extends JComponent {
     private static final int CHESSBOARD_SIZE = 8;
     private final ChessComponent[][] chessComponents = new ChessComponent[CHESSBOARD_SIZE][CHESSBOARD_SIZE];
+    private final boolean AI;
+    private final ChessAI chessAI;
     private ChessColor currentColor = ChessColor.WHITE;
     private int round;
     private final ClickController clickController = new ClickController(this);
@@ -25,19 +30,16 @@
     public KingChessComponent blackKing;
     private JLabel hintLabel;
 
-
-    private Color color1;
-    private Color color2;
-
     public void setHintLabel(JLabel hintLabel) {
         this.hintLabel = hintLabel;
     }
 
 
-    public Chessboard(int width, int height) {
+    public Chessboard(int width, int height, boolean AI, AILevel level) {
         setLayout(null); // Use absolute layout.
         setSize(width, height);
-
+        this.AI = AI;
+        this.chessAI = new ChessAI(this, level);
         CHESS_SIZE = width / 8;
         System.out.printf("chessboard size = %d, chess size = %d\n", width, CHESS_SIZE);
 
@@ -86,6 +88,10 @@
         this.round = round;
     }
 
+    public ClickController getClickController() {
+        return clickController;
+    }
+
     public GameController getGameController() {
         return gameController;
     }
@@ -94,6 +100,14 @@
         this.gameController = gameController;
     }
 
+    public boolean isAI() {
+        return AI;
+    }
+
+    public ChessAI getMyAI() {
+        return chessAI;
+    }
+
     public void putChessOnBoard(ChessComponent chessComponent) {
         int row = chessComponent.getChessboardPoint().getX(), col = chessComponent.getChessboardPoint().getY();
 
@@ -188,6 +202,19 @@
     }
 
     public void loadGame(List<String> chessData) {
+        boolean correct = true;
+        if (chessData.size() != 9) {
+            correct = false;
+            JOptionPane.showMessageDialog(null,"棋盘格式有误或缺少下一次行棋方！","文件读取异常",JOptionPane.ERROR_MESSAGE);
+        }
+        for (int i = 0; i < 8; i++) {
+            String str = chessData.get(i);
+            if (str.length() != 8 && correct) {
+                correct = false;
+                JOptionPane.showMessageDialog(null,"棋盘格式有误！","文件读取异常",JOptionPane.ERROR_MESSAGE);
+                break;
+            }
+        }
         initiateEmptyChessboard();
         for (int i = 0; i < chessData.size() - 1; i++){
             for (int j = 0; j < 8; j++){
@@ -204,6 +231,13 @@
                     case 'r' -> initRookOnBoard(i, j, ChessColor.WHITE);
                     case 'P' -> initPawnOnBoard(i, j, ChessColor.BLACK);
                     case 'p' -> initPawnOnBoard(i, j, ChessColor.WHITE);
+                    case '_' -> {}
+                    default -> {
+                        if (correct) {
+                            correct = false;
+                            JOptionPane.showMessageDialog(null,"棋子形式有误！","文件读取异常",JOptionPane.ERROR_MESSAGE);
+                        }
+                    }
                 }
             }
         }
@@ -211,9 +245,19 @@
         if (chessData.get(chessData.size() - 1).equals("w")) {
             currentColor = ChessColor.WHITE;
         }
-        else
+        else if (chessData.get(chessData.size() - 1).equals("b"))
             currentColor = ChessColor.BLACK;
+        else {
+            if (correct){
+                correct = false;
+                JOptionPane.showMessageDialog(null,"下一步行棋方有误！","文件读取异常",JOptionPane.ERROR_MESSAGE);
+
+            }
+        }
         this.checkCheckmated();
+        if (!correct) {
+            gameController.loadGameFromFile(new File(".\\data\\Initial.txt"));
+        }
     }
 
     public void pawnTurn (ChessComponent chess , int n) {
@@ -261,6 +305,9 @@
         }
 
     }
+    public boolean checkAITurn() {
+        return currentColor == ChessColor.BLACK && AI;
+    }
 
     public boolean checkGameOver() {
         ChessComponent[][] chessComponents = getChessComponents();
Index: src/view/ChessGameFrame.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package view;\r\n\r\nimport com.tedu.manager.MusicPlayer;\r\nimport controller.GameController;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\n\r\n/**\r\n * 这个类表示游戏过程中的整个游戏界面，是一切的载体\r\n */\r\npublic class ChessGameFrame extends JFrame implements ActionListener {\r\n    private GameController gameController;\r\n    private Chessboard chessboard;\r\n\r\n    private JLabel jl;\r\n    private String back;\r\n    private String BGM;\r\n    public MusicPlayer musicPlayer;\r\n    JPanel panel;\r\n    private JLabel hintLabel = new JLabel(\"Turn For WHITE\");\r\n\r\n    public String getBack() {\r\n        return back;\r\n    }\r\n\r\n    public String getBGM() {\r\n        return BGM;\r\n    }\r\n\r\n    public ChessGameFrame(String back, String BGM) {\r\n        setTitle(\"2022 CS102A Project Demo\"); //设置标题\r\n        this.back = back;\r\n        this.BGM = BGM;\r\n\r\n        musicPlayer = new MusicPlayer(getBGM());\r\n        musicPlayer.play();\r\n        musicPlayer.setLoop(true);\r\n\r\n        this.setTitle(\"ChessGame\");\r\n        this.setSize(1000,800);\r\n        this.setLocationRelativeTo(null);\r\n        this.setResizable(false);\r\n        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n\r\n        ImageIcon image = new ImageIcon(getBack());\r\n        Image image1 = image.getImage();\r\n        Image image2 = image1.getScaledInstance(getWidth(),getHeight(), Image.SCALE_FAST);\r\n        ImageIcon trueBack = new ImageIcon(image2);\r\n        jl = new JLabel(trueBack);\r\n        jl.setBounds(0,0, getWidth(), getHeight());\r\n\r\n        panel = new JPanel();\r\n        panel.setLayout(null);\r\n\r\n        JButton bt3 = createButton(\"Restart\");\r\n        bt3.setActionCommand(\"3\");\r\n        bt3.setLocation(800,150);\r\n        bt3.setSize(160,50);\r\n        bt3.addActionListener(this);\r\n\r\n        JButton bt6 = createButton(\"Playback\");\r\n        bt6.setSize(160,50);\r\n        bt6.setActionCommand(\"6\");\r\n        bt6.setLocation(800,450);\r\n        bt6.addActionListener(this);\r\n\r\n        JButton bt8 = createButton(\"Change BGM\");\r\n        bt8.setSize(160,50);\r\n        bt8.setActionCommand(\"8\");\r\n        bt8.setLocation(800, 650);\r\n        bt8.addActionListener(this);\r\n\r\n        panel.add(bt3);\r\n        panel.add(bt6);\r\n        panel.add(bt8);\r\n        panel.add(jl);\r\n\r\n        addChessboard();\r\n        addHintLabel();\r\n        addChangeBGI();\r\n        addSaveButton();\r\n        addLoadButton();\r\n        addBackButton();\r\n        addForwardButton();\r\n        doShutDownWork();\r\n\r\n        this.add(panel);\r\n        this.setVisible(true);\r\n    }\r\n\r\n    public void addHintLabel(){\r\n        this.hintLabel.setFont(new Font(\"Castellar\", Font.BOLD, 20));\r\n        this.hintLabel.setSize(250,60);\r\n        this.hintLabel.setLocation(760,70);\r\n        this.hintLabel.setForeground(new Color(246, 231, 215));\r\n        add(hintLabel);\r\n    }\r\n\r\n    private void addChessboard() {\r\n        chessboard = new Chessboard(650,650);\r\n        chessboard.setHintLabel(hintLabel);\r\n        gameController = new GameController(chessboard);\r\n        chessboard.setLocation(getWidth()/20, getWidth()/20);\r\n        add(chessboard);\r\n    }\r\n\r\n    private void addSaveButton() {\r\n        JButton button = new JButton(\"Save\");\r\n        button.setBackground(new Color(246, 231, 215));\r\n        button.setLocation(800, 250);\r\n        button.setSize(160, 50);\r\n        button.setFont(new Font(\"Castellar\", Font.BOLD, 12));\r\n        panel.add(button);\r\n\r\n        button.addActionListener(e -> {\r\n            System.out.println(\"Click load\");\r\n            gameController.setSave(true);\r\n        });\r\n    }\r\n\r\n    private void addLoadButton() {\r\n        JButton button = new JButton(\"Load\");\r\n        button.setBackground(new Color(246, 231, 215));\r\n        button.setLocation(800, 350);\r\n        button.setSize(160, 50);\r\n        button.setFont(new Font(\"Castellar\", Font.BOLD, 12));\r\n        panel.add(button);\r\n\r\n        button.addActionListener(e -> {\r\n            gameController.showFileOpenDialog(this);\r\n        });\r\n    }\r\n\r\n    private void addBackButton() {\r\n        JButton button = new JButton(\"StepBack\");\r\n        button.setBackground(new Color(246, 231, 215));\r\n        button.setLocation(320, 700);\r\n        button.setSize(160, 50);\r\n        button.setFont(new Font(\"Castellar\", Font.BOLD, 12));\r\n        panel.add(button);\r\n\r\n        button.addActionListener(e -> {\r\n            gameController.stepBack();\r\n        });\r\n    }\r\n\r\n    private void addForwardButton() {\r\n        JButton button = new JButton(\"StepForward\");\r\n        button.setBackground(new Color(246, 231, 215));\r\n        button.setLocation(50, 700);\r\n        button.setSize(160, 50);\r\n        button.setFont(new Font(\"Castellar\", Font.BOLD, 12));\r\n        panel.add(button);\r\n\r\n        button.addActionListener(e -> {\r\n            gameController.stepForward();\r\n        });\r\n    }\r\n\r\n\r\n    private void doShutDownWork(){\r\n        Runtime.getRuntime().addShutdownHook(new Thread(){\r\n            public void run(){\r\n                gameController.deleteFileNotSaved();\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void actionPerformed(ActionEvent e) {\r\n        if (e.getActionCommand().equals(\"3\")) {\r\n            gameController.loadGameFromFile(new File(\".\\\\data\\\\Initial.txt\"));\r\n        }\r\n    }\r\n\r\n    public JButton createButton(String text){\r\n        JButton btn = new JButton(text);\r\n        btn.setSize(new Dimension(160, 50));\r\n        Font font = new Font(\"Castellar\", Font.BOLD, 10);\r\n        btn.setFont(font);\r\n        btn.setBackground(new Color(246, 231, 215));\r\n        return btn;\r\n    }\r\n    public void addChangeBGI(){\r\n        JButton button = createButton(\"Change BGI\");\r\n        button.setLocation(800, 550);\r\n        button.setSize(160,50);\r\n        panel.add(button);\r\n        button.addActionListener(e -> {\r\n            JFrame frame = new JFrame(\"Change BGI\");\r\n            frame.setLocation(getWidth()/2, getHeight()/2);\r\n            frame.setSize(300,400);\r\n            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\r\n\r\n            JPanel panel1 = new JPanel();\r\n            panel1.setLayout(null);\r\n\r\n            ImageIcon pic = new ImageIcon(\"images/bac1.jpg\");\r\n            Image pic1 = pic.getImage();\r\n            Image pic2 = pic1.getScaledInstance(300,400, Image.SCALE_FAST);\r\n            ImageIcon truePic = new ImageIcon(pic2);\r\n            JLabel jb = new JLabel(truePic);\r\n            jb.setBounds(0,0, frame.getWidth(), frame.getHeight());\r\n\r\n            JLabel jl1 = new JLabel(\"切换背景\");\r\n            jl1.setLocation(100,100);\r\n            jl1.setSize(190,50);\r\n            jl1.setFont(new Font(\"造字工房米萌体\", Font.BOLD, 30));\r\n            jl1.setForeground(new Color(108, 51, 4));\r\n\r\n\r\n            JButton bt1 = createButton(\"钢铁烈风\");\r\n            bt1.setFont(new Font(\"造字工房米萌体\", Font.BOLD, 15));\r\n            bt1.setBackground(new Color(207,109,60));\r\n            bt1.addActionListener(e1 -> {\r\n                panel.remove(jl);\r\n                repaint();\r\n\r\n                ImageIcon picture= new ImageIcon(\"C:\\\\Users\\\\86131\\\\Desktop\\\\proj素材\\\\back3.jpg\");\r\n                Image picture1 = picture.getImage();\r\n                Image picture2 = picture1.getScaledInstance(getWidth(),getHeight(), Image.SCALE_FAST);\r\n                ImageIcon trueP = new ImageIcon(picture2);\r\n                jl = new JLabel(trueP);\r\n                jl.setBounds(0,0, getWidth(), getHeight());\r\n                panel.add(jl);\r\n\r\n                frame.setVisible(false);\r\n\r\n            });\r\n            bt1.setLocation(70, 170);\r\n\r\n            JButton bt2 = createButton(\"碧蓝天空\");\r\n            bt2.setFont(new Font(\"造字工房米萌体\", Font.BOLD, 15));\r\n            bt2.setBackground(new Color(207,109,60));\r\n            bt2.addActionListener(e1 -> {\r\n                panel.remove(jl);\r\n                repaint();\r\n\r\n                ImageIcon picture= new ImageIcon(\"C:\\\\Users\\\\86131\\\\Desktop\\\\proj素材\\\\back2.jpg\");\r\n                Image picture1 = picture.getImage();\r\n                Image picture2 = picture1.getScaledInstance(getWidth(),getHeight(), Image.SCALE_FAST);\r\n                ImageIcon trueP = new ImageIcon(picture2);\r\n                jl = new JLabel(trueP);\r\n                jl.setBounds(0,0, getWidth(), getHeight());\r\n                panel.add(jl);\r\n\r\n                frame.setVisible(false);\r\n\r\n            });\r\n            bt2.setLocation(70, 240);\r\n\r\n\r\n            panel1.add(jb);\r\n            panel1.add(bt1);\r\n            panel1.add(bt2);\r\n            frame.add(jl1);\r\n            frame.add(panel1);\r\n            frame.setVisible(true);\r\n        });\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/view/ChessGameFrame.java b/src/view/ChessGameFrame.java
--- a/src/view/ChessGameFrame.java	(revision 638eccc5e6f94dedffd55fd30e2324380e774a38)
+++ b/src/view/ChessGameFrame.java	(date 1653224400101)
@@ -1,5 +1,6 @@
 package view;
 
+import AI.AILevel;
 import com.tedu.manager.MusicPlayer;
 import controller.GameController;
 
@@ -15,14 +16,15 @@
  */
 public class ChessGameFrame extends JFrame implements ActionListener {
     private GameController gameController;
-    private Chessboard chessboard;
+    private final boolean AI;
+    private final AILevel level;
 
     private JLabel jl;
-    private String back;
-    private String BGM;
+    private final String back;
+    private final String BGM;
     public MusicPlayer musicPlayer;
     JPanel panel;
-    private JLabel hintLabel = new JLabel("Turn For WHITE");
+    private final JLabel hintLabel = new JLabel("Turn For WHITE");
 
     public String getBack() {
         return back;
@@ -32,10 +34,12 @@
         return BGM;
     }
 
-    public ChessGameFrame(String back, String BGM) {
+    public ChessGameFrame(String back, String BGM , boolean AI , AILevel level) {
         setTitle("2022 CS102A Project Demo"); //设置标题
         this.back = back;
         this.BGM = BGM;
+        this.AI = AI;
+        this.level = level;
 
         musicPlayer = new MusicPlayer(getBGM());
         musicPlayer.play();
@@ -102,7 +106,7 @@
     }
 
     private void addChessboard() {
-        chessboard = new Chessboard(650,650);
+        Chessboard chessboard = new Chessboard(650, 650, AI, level);
         chessboard.setHintLabel(hintLabel);
         gameController = new GameController(chessboard);
         chessboard.setLocation(getWidth()/20, getWidth()/20);
Index: src/view/FirstView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package view;\r\n\r\nimport com.tedu.manager.MusicPlayer;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.io.IOException;\r\n\r\npublic class FirstView extends JFrame implements ActionListener {\r\n\r\n    private String str;\r\n\r\n\r\n    public FirstView(){\r\n        this.setTitle(\"Chess\");\r\n        this.setSize(550, 500);\r\n        this.setLocationRelativeTo(null);\r\n        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n        this.setResizable(false);\r\n        this.getContentPane().setBackground(new Color(88,47,27));\r\n\r\n        ImageIcon image = new ImageIcon(\"images/bac1.jpg\");\r\n        Image image1 = image.getImage();\r\n        Image image2 = image1.getScaledInstance(getWidth(),getHeight(), Image.SCALE_FAST);\r\n        ImageIcon trueBack = new ImageIcon(image2);\r\n        JLabel jl = new JLabel(trueBack);\r\n        jl.setBounds(0,0, getWidth(), getHeight());\r\n\r\n        JPanel panel = new JPanel();\r\n        panel.setLayout(null);\r\n\r\n        JLabel name = new JLabel(\"Chess\");\r\n        name.setSize(200,100);\r\n        name.setLocation(205, 70);\r\n        name.setFont(new Font(\"Castellar\", Font.BOLD, 36));\r\n        name.setForeground(new Color(108, 51, 4));\r\n\r\n\r\n        JButton bt1 = createButton(\"Single-Player\");\r\n        JButton bt2 = createButton(\"Two-Player\");\r\n        JButton bt4 = createButton(\"Help\");\r\n        JButton bt5 = createButton(\"Exit\");\r\n\r\n        bt2.setBackground(new Color(213,144,89));\r\n\r\n        bt4.setSize(149, 81);\r\n        bt4.setBackground(new Color(213,144,89));\r\n\r\n        bt5.setSize(149, 81);\r\n\r\n        bt1.setLocation(99, 164);\r\n        bt1.setActionCommand(\"1\");\r\n        bt1.addActionListener(this);\r\n\r\n        bt2.setLocation(279, 164);\r\n        bt2.setActionCommand(\"2\");\r\n        bt2.addActionListener(this);\r\n\r\n\r\n\r\n        bt4.setLocation(99, 277);\r\n        bt4.setActionCommand(\"4\");\r\n        bt4.addActionListener(this);\r\n\r\n        bt5.setLocation(279, 277);\r\n        bt5.setActionCommand(\"5\");\r\n        bt5.addActionListener(this);\r\n\r\n        panel.add(bt1);\r\n        panel.add(bt2);\r\n\r\n        panel.add(bt4);\r\n        panel.add(bt5);\r\n        panel.add(name);\r\n        panel.add(jl);\r\n        //panel.add(jl1);\r\n\r\n\r\n        this.getContentPane().add(panel);\r\n\r\n    }\r\n\r\n    public void setStr(String str) {\r\n        this.str = str;\r\n    }\r\n\r\n    public String getStr() {\r\n        return str;\r\n    }\r\n\r\n    public JButton createButton(String text){\r\n        JButton btn = new JButton(text);\r\n        btn.setSize(new Dimension(149, 81));\r\n        Font font = new Font(\"Castellar\", Font.BOLD, 13);\r\n        btn.setFont(font);\r\n        btn.setBackground(new Color(163,66,0));\r\n        return btn;\r\n    }\r\n\r\n    @Override\r\n    public void actionPerformed(ActionEvent e) {\r\n        if(e.getActionCommand().equals(\"1\")){\r\n            this.setVisible(false);\r\n            new ChessGameFrame(\"images/bac1.jpg\",\".\\\\Music\\\\gv8rh-mzyvz.wav\");\r\n        }else if(e.getActionCommand().equals(\"2\")){\r\n            this.setVisible(false);\r\n            new ChessGameFrame(\"images/bac1.jpg\",\".\\\\Music\\\\gv8rh-mzyvz.wav\");\r\n        }else if(e.getActionCommand().equals(\"4\")){\r\n            new Thread() {\r\n                //重写run方法\r\n                public void run() {\r\n                    //构造命令\r\n                    String cmd = \"cmd.exe /c start \";\r\n\r\n                    String file = \"https://jingyan.baidu.com/article/11c17a2c775262f446e39ddc.html\";\r\n\r\n                    try {\r\n                        //执行操作\r\n                        Runtime.getRuntime().exec(cmd + file);\r\n                    } catch (IOException ignore) {\r\n                        //打印异常\r\n                        ignore.printStackTrace();\r\n                    }\r\n                }\r\n            }.start();//启动线程\r\n        }\r\n        else {\r\n            System.exit(0);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/view/FirstView.java b/src/view/FirstView.java
--- a/src/view/FirstView.java	(revision 638eccc5e6f94dedffd55fd30e2324380e774a38)
+++ b/src/view/FirstView.java	(date 1653226745449)
@@ -1,5 +1,6 @@
 package view;
 
+import AI.AILevel;
 import com.tedu.manager.MusicPlayer;
 
 import javax.swing.*;
@@ -7,6 +8,7 @@
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
 import java.io.IOException;
+import java.util.Random;
 
 public class FirstView extends JFrame implements ActionListener {
 
@@ -82,14 +84,6 @@
 
     }
 
-    public void setStr(String str) {
-        this.str = str;
-    }
-
-    public String getStr() {
-        return str;
-    }
-
     public JButton createButton(String text){
         JButton btn = new JButton(text);
         btn.setSize(new Dimension(149, 81));
@@ -103,10 +97,31 @@
     public void actionPerformed(ActionEvent e) {
         if(e.getActionCommand().equals("1")){
             this.setVisible(false);
-            new ChessGameFrame("images/bac1.jpg",".\\Music\\gv8rh-mzyvz.wav");
+            Object[] level = {"Random", "Greedy", "Simple", "Hard"};
+            int i = JOptionPane.showOptionDialog(null, "请选择难度:","人机对战",
+                    JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,level,level[0]);
+
+            switch (i) {
+                case 0 -> {
+                    new ChessGameFrame("images/bac1.jpg",".\\Music\\gv8rh-mzyvz.wav",true, AILevel.Random);
+                    System.out.println("Random");
+                }
+                case 1 -> {
+                    new ChessGameFrame("images/bac1.jpg",".\\Music\\gv8rh-mzyvz.wav",true, AILevel.Greedy);
+                    System.out.println("Greedy");
+                }
+                case 2 -> {
+                    new ChessGameFrame("images/bac1.jpg",".\\Music\\gv8rh-mzyvz.wav",true, AILevel.Simple);
+                    System.out.println("Simple");
+                }
+                case 3 ->{
+                    new ChessGameFrame("images/bac1.jpg",".\\Music\\gv8rh-mzyvz.wav",true, AILevel.Hard);
+                    System.out.println("Hard");
+                }
+            }
         }else if(e.getActionCommand().equals("2")){
             this.setVisible(false);
-            new ChessGameFrame("images/bac1.jpg",".\\Music\\gv8rh-mzyvz.wav");
+            new ChessGameFrame("images/bac1.jpg",".\\Music\\gv8rh-mzyvz.wav",false, null);
         }else if(e.getActionCommand().equals("4")){
             new Thread() {
                 //重写run方法
Index: src/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import view.ChessGameFrame;\r\nimport view.FirstView;\r\n\r\nimport javax.swing.*;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        /*SwingUtilities.invokeLater(() -> {\r\n            ChessGameFrame mainFrame = new ChessGameFrame(1000, 760);\r\n            mainFrame.setVisible(true);\r\n        });*/\r\n        FirstView firstView = new FirstView();\r\n        firstView.setVisible(true);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Main.java b/src/Main.java
--- a/src/Main.java	(revision 638eccc5e6f94dedffd55fd30e2324380e774a38)
+++ b/src/Main.java	(date 1653223322209)
@@ -5,11 +5,9 @@
 
 public class Main {
     public static void main(String[] args) {
-        /*SwingUtilities.invokeLater(() -> {
-            ChessGameFrame mainFrame = new ChessGameFrame(1000, 760);
-            mainFrame.setVisible(true);
-        });*/
-        FirstView firstView = new FirstView();
-        firstView.setVisible(true);
+        SwingUtilities.invokeLater(() -> {
+            FirstView firstView = new FirstView();
+            firstView.setVisible(true);
+        });
     }
 }
Index: .idea/uiDesigner.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/uiDesigner.xml b/.idea/uiDesigner.xml
new file mode 100644
--- /dev/null	(date 1653208846975)
+++ b/.idea/uiDesigner.xml	(date 1653208846975)
@@ -0,0 +1,124 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Palette2">
+    <group name="Swing">
+      <item class="com.intellij.uiDesigner.HSpacer" tooltip-text="Horizontal Spacer" icon="/com/intellij/uiDesigner/icons/hspacer.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="1" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="com.intellij.uiDesigner.VSpacer" tooltip-text="Vertical Spacer" icon="/com/intellij/uiDesigner/icons/vspacer.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="1" anchor="0" fill="2" />
+      </item>
+      <item class="javax.swing.JPanel" icon="/com/intellij/uiDesigner/icons/panel.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JScrollPane" icon="/com/intellij/uiDesigner/icons/scrollPane.png" removable="false" auto-create-binding="false" can-attach-label="true">
+        <default-constraints vsize-policy="7" hsize-policy="7" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JButton" icon="/com/intellij/uiDesigner/icons/button.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="0" fill="1" />
+        <initial-values>
+          <property name="text" value="Button" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JRadioButton" icon="/com/intellij/uiDesigner/icons/radioButton.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="RadioButton" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JCheckBox" icon="/com/intellij/uiDesigner/icons/checkBox.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="CheckBox" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JLabel" icon="/com/intellij/uiDesigner/icons/label.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="Label" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JTextField" icon="/com/intellij/uiDesigner/icons/textField.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JPasswordField" icon="/com/intellij/uiDesigner/icons/passwordField.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JFormattedTextField" icon="/com/intellij/uiDesigner/icons/formattedTextField.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextArea" icon="/com/intellij/uiDesigner/icons/textArea.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextPane" icon="/com/intellij/uiDesigner/icons/textPane.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JEditorPane" icon="/com/intellij/uiDesigner/icons/editorPane.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JComboBox" icon="/com/intellij/uiDesigner/icons/comboBox.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="2" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JTable" icon="/com/intellij/uiDesigner/icons/table.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JList" icon="/com/intellij/uiDesigner/icons/list.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="2" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTree" icon="/com/intellij/uiDesigner/icons/tree.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTabbedPane" icon="/com/intellij/uiDesigner/icons/tabbedPane.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSplitPane" icon="/com/intellij/uiDesigner/icons/splitPane.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSpinner" icon="/com/intellij/uiDesigner/icons/spinner.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSlider" icon="/com/intellij/uiDesigner/icons/slider.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSeparator" icon="/com/intellij/uiDesigner/icons/separator.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JProgressBar" icon="/com/intellij/uiDesigner/icons/progressbar.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JToolBar" icon="/com/intellij/uiDesigner/icons/toolbar.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1">
+          <preferred-size width="-1" height="20" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JToolBar$Separator" icon="/com/intellij/uiDesigner/icons/toolbarSeparator.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JScrollBar" icon="/com/intellij/uiDesigner/icons/scrollbar.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="0" anchor="0" fill="2" />
+      </item>
+    </group>
+  </component>
+</project>
\ No newline at end of file
Index: src/AI/AILevel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/AI/AILevel.java b/src/AI/AILevel.java
new file mode 100644
--- /dev/null	(date 1653226357130)
+++ b/src/AI/AILevel.java	(date 1653226357130)
@@ -0,0 +1,5 @@
+package AI;
+
+public enum AILevel {
+    Random, Greedy, Simple, Hard
+}
Index: src/controller/GameController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controller;\r\n\r\nimport view.Chessboard;\r\n\r\nimport javax.swing.*;\r\nimport javax.swing.filechooser.FileNameExtensionFilter;\r\nimport java.awt.*;\r\nimport java.io.*;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.text.DateFormat;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.List;\r\n\r\npublic class GameController {\r\n    private final Chessboard chessboard;\r\n    String date;\r\n    private boolean save;\r\n\r\n    public void setSave(boolean save) {\r\n        this.save = save;\r\n    }\r\n\r\n    public GameController(Chessboard chessboard) {\r\n        this.chessboard = chessboard;\r\n        this.chessboard.setGameController(this);\r\n        this.save = false;\r\n        DateFormat df = new SimpleDateFormat(\"yyyy年MM月dd日HH_mm_ss\");\r\n        this.date = df.format(new Date()).trim();\r\n        File file = new File(\".\\\\data\\\\\"+date);\r\n        boolean flag = file.mkdir();\r\n        System.out.println(flag ? \"Successful!\":\"failed!\");\r\n    }\r\n\r\n    public void loadGameFromFile(File file) {\r\n        String Path = file.getPath();\r\n        BufferedReader reader = null;\r\n        List<String> chessData = new ArrayList<>();\r\n        try {\r\n            FileInputStream fileInputStream = new FileInputStream(Path);\r\n            InputStreamReader inputStreamReader = new InputStreamReader(fileInputStream, StandardCharsets.UTF_8);\r\n            reader = new BufferedReader(inputStreamReader);\r\n            String tempString;\r\n            while ((tempString = reader.readLine()) != null){\r\n                chessData.add(tempString);\r\n            }\r\n            reader.close();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        } finally {\r\n            if (reader != null) {\r\n                try {\r\n                    reader.close();\r\n                } catch (IOException e){\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        }\r\n        chessboard.loadGame(chessData);\r\n    }\r\n\r\n    public void saveGameToFile(List<String> chessData) {\r\n        BufferedWriter writer = null;\r\n        File file = new File(\".\\\\data\\\\\"+ date +\"\\\\\" + chessboard.getRound() + \".txt\");\r\n        if(!file.exists()){\r\n            try {\r\n                file.createNewFile();\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n        try {\r\n            writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file,false), StandardCharsets.UTF_8));\r\n            for (String data : chessData){\r\n                writer.write(data);\r\n                writer.newLine();\r\n            }\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }finally {\r\n            try {\r\n                if(writer != null){\r\n                    writer.close();\r\n                }\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n        System.out.println(\"文件写入成功！\");\r\n    }\r\n\r\n    public void stepBack() {\r\n        File file = new File(\".\\\\data\\\\\"+ date + \"\\\\\" + (chessboard.getRound() - 1) + \".txt\");\r\n        if (file.exists()) {\r\n            loadGameFromFile(file);\r\n            chessboard.setRound(chessboard.getRound() - 1);\r\n        }\r\n    }\r\n\r\n    public void stepForward() {\r\n        File file = new File(\".\\\\data\\\\\"+ date + \"\\\\\" + (chessboard.getRound() + 1) + \".txt\");\r\n        if (file.exists()) {\r\n            loadGameFromFile(file);\r\n            chessboard.setRound(chessboard.getRound() + 1);\r\n        }\r\n    }\r\n\r\n    public void deleteFileNotSaved(){\r\n        if (!save) {\r\n            String dir = \".\\\\data\\\\\"+ date;\r\n            File dirFile = new File(dir);\r\n            if ((!dirFile.exists()) || (!dirFile.isDirectory())) {\r\n                System.out.println(\"删除文件夹失败：\" + dir + \"不存在！\");\r\n                return;\r\n            }\r\n            boolean flag = true;\r\n            File[] files = dirFile.listFiles();\r\n            if (files != null) {\r\n                for (File file : files) {\r\n                    if (file.isFile()) {\r\n                        flag = file.delete();\r\n                        if (!flag)\r\n                            break;\r\n                    }\r\n                    else if (file.isDirectory()) {\r\n                        flag = file.delete();\r\n                        if (!flag)\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n            if (!flag) {\r\n                System.out.println(\"删除文件夹失败！\");\r\n            }\r\n            if (dirFile.delete()) {\r\n                System.out.println(\"删除文件夹\" + dir + \"成功！\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\r\n     * 打开文件\r\n     */\r\n    public void showFileOpenDialog(Component parent) {\r\n        // 创建一个默认的文件选取器\r\n        JFileChooser fileChooser = new JFileChooser();\r\n\r\n        // 设置默认显示的文件夹为当前文件夹\r\n        fileChooser.setCurrentDirectory(new File(\".\\\\data\"));\r\n\r\n        fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);\r\n\r\n        // 设置是否允许多选\r\n        fileChooser.setMultiSelectionEnabled(false);\r\n\r\n        // 打开文件选择框（线程将被阻塞, 直到选择框被关闭）\r\n        int result = fileChooser.showOpenDialog(parent);\r\n\r\n        if (result == JFileChooser.APPROVE_OPTION) {\r\n            // 如果点击了\"确定\", 则获取选择的文件路径\r\n            File file = fileChooser.getSelectedFile();\r\n            this.loadGameFromFile(file);\r\n\r\n        }\r\n    }\r\n\r\n    /*\r\n     * 选择文件保存路径\r\n     */\r\n    private static void showFileSaveDialog(Component parent) {\r\n        // 创建一个默认的文件选取器\r\n        JFileChooser fileChooser = new JFileChooser();\r\n\r\n        // 设置打开文件选择框后默认输入的文件名\r\n        fileChooser.setSelectedFile(new File(\".\\\\data\\\\棋局.txt\"));\r\n\r\n        // 打开文件选择框（线程将被阻塞, 直到选择框被关闭）\r\n        int result = fileChooser.showSaveDialog(parent);\r\n\r\n        if (result == JFileChooser.APPROVE_OPTION) {\r\n            // 如果点击了\"保存\", 则获取选择的保存路径\r\n            File file = fileChooser.getSelectedFile();\r\n\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/controller/GameController.java b/src/controller/GameController.java
--- a/src/controller/GameController.java	(revision 638eccc5e6f94dedffd55fd30e2324380e774a38)
+++ b/src/controller/GameController.java	(date 1653200663837)
@@ -3,7 +3,6 @@
 import view.Chessboard;
 
 import javax.swing.*;
-import javax.swing.filechooser.FileNameExtensionFilter;
 import java.awt.*;
 import java.io.*;
 import java.nio.charset.StandardCharsets;
@@ -35,29 +34,35 @@
 
     public void loadGameFromFile(File file) {
         String Path = file.getPath();
-        BufferedReader reader = null;
-        List<String> chessData = new ArrayList<>();
-        try {
-            FileInputStream fileInputStream = new FileInputStream(Path);
-            InputStreamReader inputStreamReader = new InputStreamReader(fileInputStream, StandardCharsets.UTF_8);
-            reader = new BufferedReader(inputStreamReader);
-            String tempString;
-            while ((tempString = reader.readLine()) != null){
-                chessData.add(tempString);
-            }
-            reader.close();
-        } catch (IOException e) {
-            e.printStackTrace();
-        } finally {
-            if (reader != null) {
-                try {
-                    reader.close();
-                } catch (IOException e){
-                    e.printStackTrace();
-                }
-            }
-        }
-        chessboard.loadGame(chessData);
+        String str = Path.substring(Path.length() - 3);
+        if (str.equals("txt")){
+            BufferedReader reader = null;
+            List<String> chessData = new ArrayList<>();
+            try {
+                FileInputStream fileInputStream = new FileInputStream(Path);
+                InputStreamReader inputStreamReader = new InputStreamReader(fileInputStream, StandardCharsets.UTF_8);
+                reader = new BufferedReader(inputStreamReader);
+                String tempString;
+                while ((tempString = reader.readLine()) != null){
+                    chessData.add(tempString);
+                }
+                reader.close();
+            } catch (IOException e) {
+                e.printStackTrace();
+            } finally {
+                if (reader != null) {
+                    try {
+                        reader.close();
+                    } catch (IOException e){
+                        e.printStackTrace();
+                    }
+                }
+            }
+            chessboard.loadGame(chessData);
+        }
+        else {
+            JOptionPane.showMessageDialog(null,"文件格式错误！","文件读取异常",JOptionPane.ERROR_MESSAGE);
+        }
     }
 
     public void saveGameToFile(List<String> chessData) {
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"d48bc99d-f5be-46c8-91d2-d457e0ab2e5f\" name=\"变更\" comment=\"Initial commit\">\r\n      <change afterPath=\"$PROJECT_DIR$/data/Initial.txt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/_2022_5_22_10_55____.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/_2022_5_22_10_55____.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/com/tedu/manager/MusicPlayer.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/com/tedu/manager/MusicPlayer.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/view/ChessGameFrame.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/view/ChessGameFrame.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/view/FirstView.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/view/FirstView.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"PREVIOUS_COMMIT_AUTHORS\">\r\n      <list>\r\n        <option value=\"FerrymanSu &lt;105593007+ferrymansu@users.noreply.github.com&gt;\" />\r\n      </list>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitSEFilterConfiguration\">\r\n    <file-type-list>\r\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\r\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\r\n      <filtered-out-file-type name=\"TAG\" />\r\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\r\n    </file-type-list>\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"29Q4n14XPhmuMObgVxhkGkYktZQ\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"autoscrollFromSource\" value=\"true\" />\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/data\" />\r\n    <property name=\"project.structure.last.edited\" value=\"项目\" />\r\n    <property name=\"project.structure.proportion\" value=\"0.15\" />\r\n    <property name=\"project.structure.side.proportion\" value=\"0.0\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"File.Encoding\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\ChessDemo\\data\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"Main\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"Main\" />\r\n      <module name=\"ChessDemo\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"应用程序.Main\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"应用程序级\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"默认任务\">\r\n      <changelist id=\"d48bc99d-f5be-46c8-91d2-d457e0ab2e5f\" name=\"变更\" comment=\"\" />\r\n      <created>1653032170246</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1653032170246</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Initial commit\">\r\n      <created>1653188405213</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1653188405213</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"2\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Initial commit\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Initial commit\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\r\n          <url>file://$USER_HOME$/Desktop/proj/src/view/Chessboard.java</url>\r\n          <line>242</line>\r\n          <option name=\"timeStamp\" value=\"3\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 638eccc5e6f94dedffd55fd30e2324380e774a38)
+++ b/.idea/workspace.xml	(date 1653223322157)
@@ -5,12 +5,16 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="d48bc99d-f5be-46c8-91d2-d457e0ab2e5f" name="变更" comment="Initial commit">
-      <change afterPath="$PROJECT_DIR$/data/Initial.txt" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/_2022_5_22_10_55____.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/_2022_5_22_10_55____.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/uiDesigner.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/AI/AILevel.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/AI/ChessAI.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/com/tedu/manager/MusicPlayer.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/com/tedu/manager/MusicPlayer.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Main.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Main.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/controller/ClickController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/controller/ClickController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/controller/GameController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/controller/GameController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/model/ChessComponent.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/model/ChessComponent.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/view/ChessGameFrame.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/view/ChessGameFrame.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/view/Chessboard.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/view/Chessboard.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/view/FirstView.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/view/FirstView.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
Index: src/AI/ChessAI.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/AI/ChessAI.java b/src/AI/ChessAI.java
new file mode 100644
--- /dev/null	(date 1653226749352)
+++ b/src/AI/ChessAI.java	(date 1653226749352)
@@ -0,0 +1,153 @@
+package AI;
+
+import controller.ClickController;
+import model.ChessColor;
+import model.ChessComponent;
+import model.EmptySlotComponent;
+import view.Chessboard;
+import view.ChessboardPoint;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Random;
+
+public class ChessAI implements Cloneable{
+    private final Chessboard chessboard;
+    private final ClickController clickController;
+    private final AILevel level;
+    private final ChessComponent[][] chessComponents;
+    private final HashMap<Character,Integer> hashMap;
+
+    public ChessAI(Chessboard chessboard, AILevel level) {
+        this.chessboard = chessboard;
+        this.chessComponents = chessboard.getChessComponents();
+        this.clickController = chessboard.getClickController();
+        this.level = level;
+        hashMap = new HashMap<>();
+        hashMap.put('_', 0);
+        hashMap.put('P', 10);
+        hashMap.put('p', -10);
+        hashMap.put('N', 30);
+        hashMap.put('n', -30);
+        hashMap.put('B', 30);
+        hashMap.put('b', -30);
+        hashMap.put('R', 50);
+        hashMap.put('r', -50);
+        hashMap.put('Q', 90);
+        hashMap.put('q', -90);
+        hashMap.put('K', 900);
+        hashMap.put('k', -900);
+    }
+
+    public Chessboard getChessboard() {
+        return chessboard;
+    }
+
+    public ClickController getClickController() {
+        return clickController;
+    }
+
+    public AILevel getLevel() {
+        return level;
+    }
+
+    public ChessComponent[][] getChessComponents() {
+        return chessComponents;
+    }
+
+    public void playChess () {
+        if (level == AILevel.Random || level == AILevel.Greedy) {
+            ChessComponent chess;
+            clickController.onClick(chess = selectSource());
+            clickController.onClick(selectTarget(chess));
+        }
+        else {
+            ChessComponent[][] chessComponents = new ChessComponent[8][8];
+
+            for (int i = 0; i < 8; i++) {
+                for (int j = 0; j < 8; j++) {
+                    chessComponents[i][j] = this.chessComponents[i][j].clone();
+                }
+            }
+
+        }
+    }
+
+    public ChessComponent selectSource() {
+        if (level == AILevel.Random) {
+            Random random = new Random();
+            while (true) {
+                int X = random.nextInt(8);
+                int Y = random.nextInt(8);
+                ChessComponent chessComponent = chessComponents[X][Y];
+                if (chessComponent.getChessColor() == ChessColor.BLACK &&
+                        chessComponent.getCanMoveChess(chessComponents).size() != 0) {
+                    return chessComponent;
+                }
+            }
+        }
+        if (level == AILevel.Greedy) {
+            for (ChessComponent[] Chess : chessComponents) {
+                for (ChessComponent chess : Chess) {
+                    if (chess.getChessColor() == ChessColor.BLACK) {
+                        ArrayList<ChessboardPoint> points = chess.getCanMoveChess(chessComponents);
+                        for (ChessboardPoint point : points) {
+                            int X = point.getX();
+                            int Y = point.getY();
+                            if (!(chessComponents[X][Y] instanceof EmptySlotComponent)) {
+                                return chess;
+                            }
+                        }
+                    }
+                }
+            }
+            Random random = new Random();
+            while (true) {
+                int X = random.nextInt(8);
+                int Y = random.nextInt(8);
+                ChessComponent chessComponent = chessComponents[X][Y];
+                if (chessComponent.getChessColor() == ChessColor.BLACK &&
+                        chessComponent.getCanMoveChess(chessComponents).size() != 0) {
+                    return chessComponent;
+                }
+            }
+        }
+        return null;
+    }
+
+    public ChessComponent selectTarget(ChessComponent chessComponent) {
+        ArrayList<ChessboardPoint> points = chessComponent.getCanMoveChess(chessComponents);
+        if (level == AILevel.Random) {
+            Random random = new Random();
+            int i = random.nextInt(points.size());
+            ChessboardPoint point = points.get(i);
+            return chessComponents[point.getX()][point.getY()];
+        }
+        if (level == AILevel.Simple) {
+            for (ChessboardPoint point : points) {
+                int X = point.getX();
+                int Y = point.getY();
+                if (!(chessComponents[X][Y] instanceof EmptySlotComponent)) {
+                    return chessComponents[X][Y];
+                }
+            }
+            Random random = new Random();
+            int i = random.nextInt(points.size());
+            ChessboardPoint point = points.get(i);
+            return chessComponents[point.getX()][point.getY()];
+        }
+        return null;
+    }
+
+    public int chessFunction (ChessComponent[][] chessComponents) {
+        int sum = 0;
+        for (ChessComponent[] Chess : chessComponents) {
+            for (ChessComponent chess : Chess) {
+                sum += hashMap.get(chess.Name());
+            }
+        }
+        return sum;
+    }
+
+}
+
