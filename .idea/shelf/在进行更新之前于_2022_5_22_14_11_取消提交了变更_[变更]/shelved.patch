Index: src/controller/GameController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controller;\r\n\r\nimport view.Chessboard;\r\n\r\nimport javax.swing.*;\r\nimport javax.swing.filechooser.FileNameExtensionFilter;\r\nimport java.awt.*;\r\nimport java.io.*;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.text.DateFormat;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.List;\r\n\r\npublic class GameController {\r\n    private final Chessboard chessboard;\r\n    String date;\r\n    private boolean save;\r\n\r\n    public void setSave(boolean save) {\r\n        this.save = save;\r\n    }\r\n\r\n    public GameController(Chessboard chessboard) {\r\n        this.chessboard = chessboard;\r\n        this.chessboard.setGameController(this);\r\n        this.save = false;\r\n        DateFormat df = new SimpleDateFormat(\"yyyy年MM月dd日HH_mm_ss\");\r\n        this.date = df.format(new Date()).trim();\r\n        File file = new File(\".\\\\data\\\\\"+date);\r\n        boolean flag = file.mkdir();\r\n        System.out.println(flag ? \"Successful!\":\"failed!\");\r\n    }\r\n\r\n    public void loadGameFromFile(File file) {\r\n        String Path = file.getPath();\r\n        BufferedReader reader = null;\r\n        List<String> chessData = new ArrayList<>();\r\n        try {\r\n            FileInputStream fileInputStream = new FileInputStream(Path);\r\n            InputStreamReader inputStreamReader = new InputStreamReader(fileInputStream, StandardCharsets.UTF_8);\r\n            reader = new BufferedReader(inputStreamReader);\r\n            String tempString;\r\n            while ((tempString = reader.readLine()) != null){\r\n                chessData.add(tempString);\r\n            }\r\n            reader.close();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        } finally {\r\n            if (reader != null) {\r\n                try {\r\n                    reader.close();\r\n                } catch (IOException e){\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        }\r\n        chessboard.loadGame(chessData);\r\n    }\r\n\r\n    public void saveGameToFile(List<String> chessData) {\r\n        BufferedWriter writer = null;\r\n        File file = new File(\".\\\\data\\\\\"+ date +\"\\\\\" + chessboard.getRound() + \".txt\");\r\n        if(!file.exists()){\r\n            try {\r\n                file.createNewFile();\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n        try {\r\n            writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file,false), StandardCharsets.UTF_8));\r\n            for (String data : chessData){\r\n                writer.write(data);\r\n                writer.newLine();\r\n            }\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }finally {\r\n            try {\r\n                if(writer != null){\r\n                    writer.close();\r\n                }\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n        System.out.println(\"文件写入成功！\");\r\n    }\r\n\r\n    public void stepBack() {\r\n        File file = new File(\".\\\\data\\\\\"+ date + \"\\\\\" + (chessboard.getRound() - 1) + \".txt\");\r\n        if (file.exists()) {\r\n            loadGameFromFile(file);\r\n            chessboard.setRound(chessboard.getRound() - 1);\r\n        }\r\n    }\r\n\r\n    public void stepForward() {\r\n        File file = new File(\".\\\\data\\\\\"+ date + \"\\\\\" + (chessboard.getRound() + 1) + \".txt\");\r\n        if (file.exists()) {\r\n            loadGameFromFile(file);\r\n            chessboard.setRound(chessboard.getRound() + 1);\r\n        }\r\n    }\r\n\r\n    public void deleteFileNotSaved(){\r\n        if (!save) {\r\n            String dir = \".\\\\data\\\\\"+ date;\r\n            File dirFile = new File(dir);\r\n            if ((!dirFile.exists()) || (!dirFile.isDirectory())) {\r\n                System.out.println(\"删除文件夹失败：\" + dir + \"不存在！\");\r\n                return;\r\n            }\r\n            boolean flag = true;\r\n            File[] files = dirFile.listFiles();\r\n            if (files != null) {\r\n                for (File file : files) {\r\n                    if (file.isFile()) {\r\n                        flag = file.delete();\r\n                        if (!flag)\r\n                            break;\r\n                    }\r\n                    else if (file.isDirectory()) {\r\n                        flag = file.delete();\r\n                        if (!flag)\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n            if (!flag) {\r\n                System.out.println(\"删除文件夹失败！\");\r\n            }\r\n            if (dirFile.delete()) {\r\n                System.out.println(\"删除文件夹\" + dir + \"成功！\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\r\n     * 打开文件\r\n     */\r\n    public void showFileOpenDialog(Component parent) {\r\n        // 创建一个默认的文件选取器\r\n        JFileChooser fileChooser = new JFileChooser();\r\n\r\n        // 设置默认显示的文件夹为当前文件夹\r\n        fileChooser.setCurrentDirectory(new File(\".\\\\data\"));\r\n\r\n        fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);\r\n\r\n        // 设置是否允许多选\r\n        fileChooser.setMultiSelectionEnabled(false);\r\n\r\n        // 打开文件选择框（线程将被阻塞, 直到选择框被关闭）\r\n        int result = fileChooser.showOpenDialog(parent);\r\n\r\n        if (result == JFileChooser.APPROVE_OPTION) {\r\n            // 如果点击了\"确定\", 则获取选择的文件路径\r\n            File file = fileChooser.getSelectedFile();\r\n            this.loadGameFromFile(file);\r\n\r\n        }\r\n    }\r\n\r\n    /*\r\n     * 选择文件保存路径\r\n     */\r\n    private static void showFileSaveDialog(Component parent) {\r\n        // 创建一个默认的文件选取器\r\n        JFileChooser fileChooser = new JFileChooser();\r\n\r\n        // 设置打开文件选择框后默认输入的文件名\r\n        fileChooser.setSelectedFile(new File(\".\\\\data\\\\棋局.txt\"));\r\n\r\n        // 打开文件选择框（线程将被阻塞, 直到选择框被关闭）\r\n        int result = fileChooser.showSaveDialog(parent);\r\n\r\n        if (result == JFileChooser.APPROVE_OPTION) {\r\n            // 如果点击了\"保存\", 则获取选择的保存路径\r\n            File file = fileChooser.getSelectedFile();\r\n\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/controller/GameController.java b/src/controller/GameController.java
--- a/src/controller/GameController.java	(revision 3ef6cbb3d793586c11b047f53524c7f5824c0778)
+++ b/src/controller/GameController.java	(date 1653199751495)
@@ -3,7 +3,6 @@
 import view.Chessboard;
 
 import javax.swing.*;
-import javax.swing.filechooser.FileNameExtensionFilter;
 import java.awt.*;
 import java.io.*;
 import java.nio.charset.StandardCharsets;
@@ -35,29 +34,35 @@
 
     public void loadGameFromFile(File file) {
         String Path = file.getPath();
-        BufferedReader reader = null;
-        List<String> chessData = new ArrayList<>();
-        try {
-            FileInputStream fileInputStream = new FileInputStream(Path);
-            InputStreamReader inputStreamReader = new InputStreamReader(fileInputStream, StandardCharsets.UTF_8);
-            reader = new BufferedReader(inputStreamReader);
-            String tempString;
-            while ((tempString = reader.readLine()) != null){
-                chessData.add(tempString);
-            }
-            reader.close();
-        } catch (IOException e) {
-            e.printStackTrace();
-        } finally {
-            if (reader != null) {
-                try {
-                    reader.close();
-                } catch (IOException e){
-                    e.printStackTrace();
-                }
-            }
-        }
-        chessboard.loadGame(chessData);
+        String str = Path.substring(Path.length() - 3);
+        if (str.equals("txt")){
+            BufferedReader reader = null;
+            List<String> chessData = new ArrayList<>();
+            try {
+                FileInputStream fileInputStream = new FileInputStream(Path);
+                InputStreamReader inputStreamReader = new InputStreamReader(fileInputStream, StandardCharsets.UTF_8);
+                reader = new BufferedReader(inputStreamReader);
+                String tempString;
+                while ((tempString = reader.readLine()) != null){
+                    chessData.add(tempString);
+                }
+                reader.close();
+            } catch (IOException e) {
+                e.printStackTrace();
+            } finally {
+                if (reader != null) {
+                    try {
+                        reader.close();
+                    } catch (IOException e){
+                        e.printStackTrace();
+                    }
+                }
+            }
+            chessboard.loadGame(chessData);
+        }
+        else {
+            JOptionPane.showMessageDialog(null,"文件格式错误！","文件读取异常",JOptionPane.ERROR_MESSAGE);
+        }
     }
 
     public void saveGameToFile(List<String> chessData) {
Index: src/view/Chessboard.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package view;\r\n\r\n\r\nimport com.tedu.manager.MusicPlayer;\r\nimport controller.GameController;\r\nimport model.*;\r\nimport controller.ClickController;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\n\r\npublic class Chessboard extends JComponent {\r\n    private static final int CHESSBOARD_SIZE = 8;\r\n    private final ChessComponent[][] chessComponents = new ChessComponent[CHESSBOARD_SIZE][CHESSBOARD_SIZE];\r\n    private ChessColor currentColor = ChessColor.WHITE;\r\n    private int round;\r\n    private final ClickController clickController = new ClickController(this);\r\n    private GameController gameController;\r\n    private final int CHESS_SIZE;\r\n    protected ChessColor winner;\r\n    public KingChessComponent whiteKing;\r\n    public KingChessComponent blackKing;\r\n    private JLabel hintLabel;\r\n\r\n\r\n    private Color color1;\r\n    private Color color2;\r\n\r\n    public void setHintLabel(JLabel hintLabel) {\r\n        this.hintLabel = hintLabel;\r\n    }\r\n\r\n\r\n    public Chessboard(int width, int height) {\r\n        setLayout(null); // Use absolute layout.\r\n        setSize(width, height);\r\n\r\n        CHESS_SIZE = width / 8;\r\n        System.out.printf(\"chessboard size = %d, chess size = %d\\n\", width, CHESS_SIZE);\r\n\r\n        round = 0;\r\n        initiateEmptyChessboard();\r\n\r\n        initRookOnBoard(0, 0, ChessColor.BLACK);\r\n        initRookOnBoard(0, CHESSBOARD_SIZE - 1, ChessColor.BLACK);\r\n        initRookOnBoard(CHESSBOARD_SIZE - 1, 0, ChessColor.WHITE);\r\n        initRookOnBoard(CHESSBOARD_SIZE - 1, CHESSBOARD_SIZE - 1, ChessColor.WHITE);\r\n        initKnightOnBoard(0, 1, ChessColor.BLACK);\r\n        initKnightOnBoard(0, CHESSBOARD_SIZE - 2, ChessColor.BLACK);\r\n        initKnightOnBoard(CHESSBOARD_SIZE - 1, 1, ChessColor.WHITE);\r\n        initKnightOnBoard(CHESSBOARD_SIZE - 1, CHESSBOARD_SIZE - 2, ChessColor.WHITE);\r\n        initBishopOnBoard(0, 2, ChessColor.BLACK);\r\n        initBishopOnBoard(0, CHESSBOARD_SIZE - 3, ChessColor.BLACK);\r\n        initBishopOnBoard(CHESSBOARD_SIZE - 1, 2, ChessColor.WHITE);\r\n        initBishopOnBoard(CHESSBOARD_SIZE - 1, CHESSBOARD_SIZE - 3, ChessColor.WHITE);\r\n        blackKing = initKingOnBoard(0, CHESSBOARD_SIZE - 4, ChessColor.BLACK);\r\n        whiteKing = initKingOnBoard(CHESSBOARD_SIZE - 1, CHESSBOARD_SIZE - 4, ChessColor.WHITE);\r\n        initQueenOnBoard(0, 3, ChessColor.BLACK);\r\n        initQueenOnBoard(CHESSBOARD_SIZE - 1, 3, ChessColor.WHITE);\r\n        for (int i = 0; i < CHESSBOARD_SIZE; i++){\r\n            initPawnOnBoard(1, i, ChessColor.BLACK);\r\n            initPawnOnBoard(CHESSBOARD_SIZE - 2, i, ChessColor.WHITE);\r\n        }\r\n    }\r\n\r\n    public ChessComponent[][] getChessComponents() {\r\n        return chessComponents;\r\n    }\r\n\r\n    public ChessColor getCurrentColor() {\r\n        return currentColor;\r\n    }\r\n\r\n    public ChessColor getWinner() {\r\n        return winner;\r\n    }\r\n\r\n    public int getRound() {\r\n        return round;\r\n    }\r\n\r\n    public void setRound(int round) {\r\n        this.round = round;\r\n    }\r\n\r\n    public GameController getGameController() {\r\n        return gameController;\r\n    }\r\n\r\n    public void setGameController(GameController gameController) {\r\n        this.gameController = gameController;\r\n    }\r\n\r\n    public void putChessOnBoard(ChessComponent chessComponent) {\r\n        int row = chessComponent.getChessboardPoint().getX(), col = chessComponent.getChessboardPoint().getY();\r\n\r\n        if (chessComponents[row][col] != null) {\r\n            remove(chessComponents[row][col]);\r\n        }\r\n        add(chessComponents[row][col] = chessComponent);\r\n    }\r\n\r\n    public void swapChessComponents(ChessComponent chess1, ChessComponent chess2) {\r\n        // Note that chess1 has higher priority, 'destroys' chess2 if exists.\r\n        remove(chess2);\r\n        add(chess2 = new EmptySlotComponent(chess2.getChessboardPoint(), chess2.getLocation(), clickController, CHESS_SIZE));\r\n        chess1.swapLocation(chess2);\r\n        int row1 = chess1.getChessboardPoint().getX(), col1 = chess1.getChessboardPoint().getY();\r\n        chessComponents[row1][col1] = chess1;\r\n        int row2 = chess2.getChessboardPoint().getX(), col2 = chess2.getChessboardPoint().getY();\r\n        chessComponents[row2][col2] = chess2;\r\n\r\n        MusicPlayer musicPlayer = new MusicPlayer(\"./Music/ChessSound.wav\");\r\n        musicPlayer.play();\r\n\r\n        chess1.repaint();\r\n        chess2.repaint();\r\n    }\r\n\r\n    public void removeChessComponents(ChessComponent chess) {\r\n        remove(chess);\r\n        add(chess = new EmptySlotComponent(chess.getChessboardPoint(), chess.getLocation(), clickController, CHESS_SIZE));\r\n        chess.repaint();\r\n    }\r\n\r\n    public void initiateEmptyChessboard() {\r\n        for (int i = 0; i < chessComponents.length; i++) {\r\n            for (int j = 0; j < chessComponents[i].length; j++) {\r\n                putChessOnBoard(new EmptySlotComponent(new ChessboardPoint(i, j), calculatePoint(i, j), clickController, CHESS_SIZE));\r\n            }\r\n        }\r\n    }\r\n\r\n    public void swapColor() {\r\n        currentColor = currentColor == ChessColor.BLACK ? ChessColor.WHITE : ChessColor.BLACK;\r\n        hintLabel.setText(currentColor == ChessColor.BLACK? \"Turn For BLACK\" : \"Turn For WHITE\");\r\n    }\r\n\r\n    private void initRookOnBoard(int row, int col, ChessColor color) {\r\n        ChessComponent chessComponent = new RookChessComponent(new ChessboardPoint(row, col), calculatePoint(row, col), color, clickController, CHESS_SIZE);\r\n        chessComponent.setVisible(true);\r\n        putChessOnBoard(chessComponent);\r\n    }\r\n\r\n    private void initKnightOnBoard(int row, int col, ChessColor color) {\r\n        ChessComponent chessComponent = new KnightChessComponent(new ChessboardPoint(row, col), calculatePoint(row, col), color, clickController, CHESS_SIZE);\r\n        chessComponent.setVisible(true);\r\n        putChessOnBoard(chessComponent);\r\n    }\r\n\r\n    private void initBishopOnBoard(int row, int col, ChessColor color) {\r\n        ChessComponent chessComponent = new BishopChessComponent(new ChessboardPoint(row, col), calculatePoint(row, col), color, clickController, CHESS_SIZE);\r\n        chessComponent.setVisible(true);\r\n        putChessOnBoard(chessComponent);\r\n    }\r\n\r\n    private void initQueenOnBoard(int row, int col, ChessColor color) {\r\n        ChessComponent chessComponent = new QueenChessComponent(new ChessboardPoint(row, col), calculatePoint(row, col), color, clickController, CHESS_SIZE);\r\n        chessComponent.setVisible(true);\r\n        putChessOnBoard(chessComponent);\r\n    }\r\n\r\n    private KingChessComponent initKingOnBoard(int row, int col, ChessColor color) {\r\n        KingChessComponent chessComponent = new KingChessComponent(new ChessboardPoint(row, col), calculatePoint(row, col), color, clickController, CHESS_SIZE);\r\n        chessComponent.setVisible(true);\r\n        putChessOnBoard(chessComponent);\r\n        return chessComponent;\r\n    }\r\n\r\n    private void initPawnOnBoard(int row, int col, ChessColor color) {\r\n        ChessComponent chessComponent = new PawnChessComponent(new ChessboardPoint(row, col), calculatePoint(row, col), color, clickController, CHESS_SIZE);\r\n        chessComponent.setVisible(true);\r\n        putChessOnBoard(chessComponent);\r\n    }\r\n\r\n    @Override\r\n    protected void paintComponent(Graphics g) {\r\n        super.paintComponent(g);\r\n        ((Graphics2D) g).setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\r\n    }\r\n\r\n\r\n    private Point calculatePoint(int row, int col) {\r\n        return new Point(col * CHESS_SIZE, row * CHESS_SIZE);\r\n    }\r\n\r\n    public void loadGame(List<String> chessData) {\r\n        initiateEmptyChessboard();\r\n        for (int i = 0; i < chessData.size() - 1; i++){\r\n            for (int j = 0; j < 8; j++){\r\n                switch (chessData.get(i).charAt(j)) {\r\n                    case 'K' -> blackKing = initKingOnBoard(i, j, ChessColor.BLACK);\r\n                    case 'k' -> whiteKing = initKingOnBoard(i, j, ChessColor.WHITE);\r\n                    case 'Q' -> initQueenOnBoard(i, j, ChessColor.BLACK);\r\n                    case 'q' -> initQueenOnBoard(i, j, ChessColor.WHITE);\r\n                    case 'B' -> initBishopOnBoard(i, j, ChessColor.BLACK);\r\n                    case 'b' -> initBishopOnBoard(i, j, ChessColor.WHITE);\r\n                    case 'N' -> initKnightOnBoard(i, j, ChessColor.BLACK);\r\n                    case 'n' -> initKnightOnBoard(i, j, ChessColor.WHITE);\r\n                    case 'R' -> initRookOnBoard(i, j, ChessColor.BLACK);\r\n                    case 'r' -> initRookOnBoard(i, j, ChessColor.WHITE);\r\n                    case 'P' -> initPawnOnBoard(i, j, ChessColor.BLACK);\r\n                    case 'p' -> initPawnOnBoard(i, j, ChessColor.WHITE);\r\n                }\r\n            }\r\n        }\r\n        this.repaint();\r\n        if (chessData.get(chessData.size() - 1).equals(\"w\")) {\r\n            currentColor = ChessColor.WHITE;\r\n        }\r\n        else\r\n            currentColor = ChessColor.BLACK;\r\n        this.checkCheckmated();\r\n    }\r\n\r\n    public void pawnTurn (ChessComponent chess , int n) {\r\n        final ChessColor chessColor = chess.getChessColor();\r\n        final int X = chess.getChessboardPoint().getX();\r\n        final int Y = chess.getChessboardPoint().getY();\r\n        remove(chess);\r\n        switch (n) {\r\n            case 0 -> initQueenOnBoard(X,Y,chessColor);\r\n            case 1 -> initBishopOnBoard(X,Y,chessColor);\r\n            case 2 -> initKnightOnBoard(X,Y,chessColor);\r\n            case 3 -> initRookOnBoard(X,Y,chessColor);\r\n        }\r\n        chessComponents[X][Y].repaint();\r\n    }\r\n\r\n    public void checkCheckmated(){\r\n        if (currentColor == ChessColor.BLACK){\r\n            whiteKing.setCheckmated(false);\r\n            whiteKing.repaint();\r\n            for (ChessComponent[] Chess : chessComponents) {\r\n                for (ChessComponent chess : Chess){\r\n                    if (chess.getChessColor() != currentColor &&\r\n                            chess.getCanMoveChess(chessComponents).contains(blackKing.getChessboardPoint())){\r\n                        blackKing.setCheckmated(true);\r\n                        blackKing.repaint();\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            blackKing.setCheckmated(false);\r\n            blackKing.repaint();\r\n            for (ChessComponent[] Chess : chessComponents) {\r\n                for (ChessComponent chess : Chess){\r\n                    if (chess.getChessColor() != currentColor &&\r\n                            chess.getCanMoveChess(chessComponents).contains(whiteKing.getChessboardPoint())){\r\n                        whiteKing.setCheckmated(true);\r\n                        whiteKing.repaint();\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    public boolean checkGameOver() {\r\n        ChessComponent[][] chessComponents = getChessComponents();\r\n        ChessColor chessColor = getCurrentColor();\r\n        for (ChessComponent[] Chess : chessComponents){\r\n            for (ChessComponent chess : Chess){\r\n                if (chess.getCanMoveChess(chessComponents).size() != 0 && chess.getChessColor() == chessColor){\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        winner = chessColor == ChessColor.BLACK? ChessColor.WHITE : ChessColor.BLACK;\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        String str = \"\";\r\n        for (int i = 0; i < 8; i++){\r\n            for (int j = 0; j < 8; j++){\r\n                str = str.concat(chessComponents[i][j].toString());\r\n            }\r\n            str = str.concat(\"\\n\");\r\n        }\r\n        if (currentColor == ChessColor.WHITE) str = str.concat(\"w\\n\");\r\n        else str = str.concat(\"b\\n\");\r\n        return str;\r\n    }\r\n\r\n    public List<String> toStringList() {\r\n        String[] strings = toString().split(\"\\n\");\r\n        System.out.println(strings.length);\r\n        return new ArrayList<>(Arrays.asList(strings));\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/view/Chessboard.java b/src/view/Chessboard.java
--- a/src/view/Chessboard.java	(revision 3ef6cbb3d793586c11b047f53524c7f5824c0778)
+++ b/src/view/Chessboard.java	(date 1653199914983)
@@ -8,6 +8,7 @@
 
 import javax.swing.*;
 import java.awt.*;
+import java.io.File;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
@@ -188,6 +189,19 @@
     }
 
     public void loadGame(List<String> chessData) {
+        boolean correct = true;
+        if (chessData.size() != 9) {
+            correct = false;
+            JOptionPane.showMessageDialog(null,"棋盘格式有误或缺少下一次行棋方！","文件读取异常",JOptionPane.ERROR_MESSAGE);
+        }
+        for (int i = 0; i < 8; i++) {
+            String str = chessData.get(i);
+            if (str.length() != 8 && correct) {
+                correct = false;
+                JOptionPane.showMessageDialog(null,"棋盘格式有误！","文件读取异常",JOptionPane.ERROR_MESSAGE);
+                break;
+            }
+        }
         initiateEmptyChessboard();
         for (int i = 0; i < chessData.size() - 1; i++){
             for (int j = 0; j < 8; j++){
@@ -204,6 +218,13 @@
                     case 'r' -> initRookOnBoard(i, j, ChessColor.WHITE);
                     case 'P' -> initPawnOnBoard(i, j, ChessColor.BLACK);
                     case 'p' -> initPawnOnBoard(i, j, ChessColor.WHITE);
+                    case '_' -> {}
+                    default -> {
+                        if (correct) {
+                            correct = false;
+                            JOptionPane.showMessageDialog(null,"棋子形式有误！","文件读取异常",JOptionPane.ERROR_MESSAGE);
+                        }
+                    }
                 }
             }
         }
@@ -211,9 +232,19 @@
         if (chessData.get(chessData.size() - 1).equals("w")) {
             currentColor = ChessColor.WHITE;
         }
-        else
+        else if (chessData.get(chessData.size() - 1).equals("b"))
             currentColor = ChessColor.BLACK;
+        else {
+            if (correct){
+                correct = false;
+                JOptionPane.showMessageDialog(null,"下一步行棋方有误！","文件读取异常",JOptionPane.ERROR_MESSAGE);
+
+            }
+        }
         this.checkCheckmated();
+        if (!correct) {
+            gameController.loadGameFromFile(new File(".\\data\\Initial.txt"));
+        }
     }
 
     public void pawnTurn (ChessComponent chess , int n) {
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"d48bc99d-f5be-46c8-91d2-d457e0ab2e5f\" name=\"变更\" comment=\"Initial commit\">\r\n      <change afterPath=\"$PROJECT_DIR$/data/Initial.txt\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/_2022_5_22_10_55____.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/_2022_5_22_10_55____.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/com/tedu/manager/MusicPlayer.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/com/tedu/manager/MusicPlayer.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/view/ChessGameFrame.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/view/ChessGameFrame.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/view/FirstView.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/view/FirstView.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"PREVIOUS_COMMIT_AUTHORS\">\r\n      <list>\r\n        <option value=\"FerrymanSu &lt;105593007+ferrymansu@users.noreply.github.com&gt;\" />\r\n      </list>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitSEFilterConfiguration\">\r\n    <file-type-list>\r\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\r\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\r\n      <filtered-out-file-type name=\"TAG\" />\r\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\r\n    </file-type-list>\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"29Q4n14XPhmuMObgVxhkGkYktZQ\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"autoscrollFromSource\" value=\"true\" />\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/data\" />\r\n    <property name=\"project.structure.last.edited\" value=\"项目\" />\r\n    <property name=\"project.structure.proportion\" value=\"0.15\" />\r\n    <property name=\"project.structure.side.proportion\" value=\"0.0\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"File.Encoding\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\ChessDemo\\data\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"Main\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"Main\" />\r\n      <module name=\"ChessDemo\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"应用程序.Main\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"应用程序级\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"默认任务\">\r\n      <changelist id=\"d48bc99d-f5be-46c8-91d2-d457e0ab2e5f\" name=\"变更\" comment=\"\" />\r\n      <created>1653032170246</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1653032170246</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Initial commit\">\r\n      <created>1653188405213</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1653188405213</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"2\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Initial commit\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Initial commit\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\r\n          <url>file://$USER_HOME$/Desktop/proj/src/view/Chessboard.java</url>\r\n          <line>242</line>\r\n          <option name=\"timeStamp\" value=\"3\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 3ef6cbb3d793586c11b047f53524c7f5824c0778)
+++ b/.idea/workspace.xml	(date 1653198723849)
@@ -5,13 +5,9 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="d48bc99d-f5be-46c8-91d2-d457e0ab2e5f" name="变更" comment="Initial commit">
-      <change afterPath="$PROJECT_DIR$/data/Initial.txt" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/_2022_5_22_10_55____.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/_2022_5_22_10_55____.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/com/tedu/manager/MusicPlayer.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/com/tedu/manager/MusicPlayer.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/view/ChessGameFrame.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/view/ChessGameFrame.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/view/FirstView.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/view/FirstView.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/controller/GameController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/controller/GameController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/view/Chessboard.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/view/Chessboard.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
